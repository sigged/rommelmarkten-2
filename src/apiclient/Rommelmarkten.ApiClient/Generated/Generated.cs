using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Rommelmarkten.ApiClient.Generated
{
    //----------------------
    // <auto-generated>
    //     Generated using the NSwag toolchain v14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
    // </auto-generated>
    //----------------------

#nullable enable

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 649 // Disable "CS0649 Field is never assigned to, and will always have its default value null"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"
#pragma warning disable 8765 // Disable "CS8765 Nullability of type of parameter doesn't match overridden member (possibly because of nullability attributes)."

    namespace Rommelmarkten.ApiClient
    {
        using System = global::System;

        [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
        public partial class AffiliateAdsClient
        {
#pragma warning disable 8618
            private string _baseUrl;
#pragma warning restore 8618

            private System.Net.Http.HttpClient _httpClient;
            private static System.Lazy<System.Text.Json.JsonSerializerOptions> _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings, true);
            private System.Text.Json.JsonSerializerOptions _instanceSettings;

#pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
            public AffiliateAdsClient(string baseUrl, System.Net.Http.HttpClient httpClient)
#pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
            {
                BaseUrl = baseUrl;
                _httpClient = httpClient;
                Initialize();
            }

            private static System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
            {
                var settings = new System.Text.Json.JsonSerializerOptions();
                UpdateJsonSerializerSettings(settings);
                return settings;
            }

            public string BaseUrl
            {
                get { return _baseUrl; }
                set
                {
                    _baseUrl = value;
                    if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                        _baseUrl += '/';
                }
            }

            protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

            static partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

            partial void Initialize();

            partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
            partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
            partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

            /// <summary>
            /// Creates a new affiliate ad
            /// </summary>
            /// <exception cref="ApiException">A server side error occurred.</exception>
            public virtual System.Threading.Tasks.Task<System.Guid> CreateAsync(string version, CreateAffiliateAdCommand command)
            {
                return CreateAsync(version, command, System.Threading.CancellationToken.None);
            }

            /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            /// <summary>
            /// Creates a new affiliate ad
            /// </summary>
            /// <exception cref="ApiException">A server side error occurred.</exception>
            public virtual async System.Threading.Tasks.Task<System.Guid> CreateAsync(string version, CreateAffiliateAdCommand command, System.Threading.CancellationToken cancellationToken)
            {
                if (version == null)
                    throw new System.ArgumentNullException("version");

                if (command == null)
                    throw new System.ArgumentNullException("command");

                var client_ = _httpClient;
                var disposeClient_ = false;
                try
                {
                    using (var request_ = new System.Net.Http.HttpRequestMessage())
                    {
                        var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(command, JsonSerializerSettings);
                        var content_ = new System.Net.Http.ByteArrayContent(json_);
                        content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                        request_.Content = content_;
                        request_.Method = new System.Net.Http.HttpMethod("POST");
                        request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                        var urlBuilder_ = new System.Text.StringBuilder();
                        if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                        // Operation Path: "api/v{version}/AffiliateAds"
                        urlBuilder_.Append("api/v");
                        urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                        urlBuilder_.Append("/AffiliateAds");

                        PrepareRequest(client_, request_, urlBuilder_);

                        var url_ = urlBuilder_.ToString();
                        request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                        PrepareRequest(client_, request_, url_);

                        var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                        var disposeResponse_ = true;
                        try
                        {
                            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                            foreach (var item_ in response_.Headers)
                                headers_[item_.Key] = item_.Value;
                            if (response_.Content != null && response_.Content.Headers != null)
                            {
                                foreach (var item_ in response_.Content.Headers)
                                    headers_[item_.Key] = item_.Value;
                            }

                            ProcessResponse(client_, response_);

                            var status_ = (int)response_.StatusCode;
                            if (status_ == 201)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<System.Guid>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                return objectResponse_.Object;
                            }
                            else
                            if (status_ == 400)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 401)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 403)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 422)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ValidationProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 500)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ExceptionProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ExceptionProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            {
                                var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                                throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                            }
                        }
                        finally
                        {
                            if (disposeResponse_)
                                response_.Dispose();
                        }
                    }
                }
                finally
                {
                    if (disposeClient_)
                        client_.Dispose();
                }
            }

            /// <summary>
            /// Updates an existing affiliate ad
            /// </summary>
            /// <exception cref="ApiException">A server side error occurred.</exception>
            public virtual System.Threading.Tasks.Task UpdateAsync(string version, UpdateAffiliateAdCommand command)
            {
                return UpdateAsync(version, command, System.Threading.CancellationToken.None);
            }

            /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            /// <summary>
            /// Updates an existing affiliate ad
            /// </summary>
            /// <exception cref="ApiException">A server side error occurred.</exception>
            public virtual async System.Threading.Tasks.Task UpdateAsync(string version, UpdateAffiliateAdCommand command, System.Threading.CancellationToken cancellationToken)
            {
                if (version == null)
                    throw new System.ArgumentNullException("version");

                if (command == null)
                    throw new System.ArgumentNullException("command");

                var client_ = _httpClient;
                var disposeClient_ = false;
                try
                {
                    using (var request_ = new System.Net.Http.HttpRequestMessage())
                    {
                        var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(command, JsonSerializerSettings);
                        var content_ = new System.Net.Http.ByteArrayContent(json_);
                        content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                        request_.Content = content_;
                        request_.Method = new System.Net.Http.HttpMethod("PUT");

                        var urlBuilder_ = new System.Text.StringBuilder();
                        if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                        // Operation Path: "api/v{version}/AffiliateAds"
                        urlBuilder_.Append("api/v");
                        urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                        urlBuilder_.Append("/AffiliateAds");

                        PrepareRequest(client_, request_, urlBuilder_);

                        var url_ = urlBuilder_.ToString();
                        request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                        PrepareRequest(client_, request_, url_);

                        var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                        var disposeResponse_ = true;
                        try
                        {
                            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                            foreach (var item_ in response_.Headers)
                                headers_[item_.Key] = item_.Value;
                            if (response_.Content != null && response_.Content.Headers != null)
                            {
                                foreach (var item_ in response_.Content.Headers)
                                    headers_[item_.Key] = item_.Value;
                            }

                            ProcessResponse(client_, response_);

                            var status_ = (int)response_.StatusCode;
                            if (status_ == 204)
                            {
                                return;
                            }
                            else
                            if (status_ == 400)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 401)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 403)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 422)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ValidationProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 500)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ExceptionProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ExceptionProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            {
                                var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                                throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                            }
                        }
                        finally
                        {
                            if (disposeResponse_)
                                response_.Dispose();
                        }
                    }
                }
                finally
                {
                    if (disposeClient_)
                        client_.Dispose();
                }
            }

            /// <summary>
            /// Gets a paged list of affiliate ads
            /// </summary>
            /// <exception cref="ApiException">A server side error occurred.</exception>
            public virtual System.Threading.Tasks.Task<PaginatedListOfAffiliateAdDto> GetPagedAffiliateAdsAsync(int? pageNumber, int? pageSize, string version)
            {
                return GetPagedAffiliateAdsAsync(pageNumber, pageSize, version, System.Threading.CancellationToken.None);
            }

            /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            /// <summary>
            /// Gets a paged list of affiliate ads
            /// </summary>
            /// <exception cref="ApiException">A server side error occurred.</exception>
            public virtual async System.Threading.Tasks.Task<PaginatedListOfAffiliateAdDto> GetPagedAffiliateAdsAsync(int? pageNumber, int? pageSize, string version, System.Threading.CancellationToken cancellationToken)
            {
                if (version == null)
                    throw new System.ArgumentNullException("version");

                var client_ = _httpClient;
                var disposeClient_ = false;
                try
                {
                    using (var request_ = new System.Net.Http.HttpRequestMessage())
                    {
                        request_.Method = new System.Net.Http.HttpMethod("GET");
                        request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                        var urlBuilder_ = new System.Text.StringBuilder();
                        if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                        // Operation Path: "api/v{version}/AffiliateAds"
                        urlBuilder_.Append("api/v");
                        urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                        urlBuilder_.Append("/AffiliateAds");
                        urlBuilder_.Append('?');
                        if (pageNumber != null)
                        {
                            urlBuilder_.Append(System.Uri.EscapeDataString("PageNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                        }
                        if (pageSize != null)
                        {
                            urlBuilder_.Append(System.Uri.EscapeDataString("PageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                        }
                        urlBuilder_.Length--;

                        PrepareRequest(client_, request_, urlBuilder_);

                        var url_ = urlBuilder_.ToString();
                        request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                        PrepareRequest(client_, request_, url_);

                        var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                        var disposeResponse_ = true;
                        try
                        {
                            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                            foreach (var item_ in response_.Headers)
                                headers_[item_.Key] = item_.Value;
                            if (response_.Content != null && response_.Content.Headers != null)
                            {
                                foreach (var item_ in response_.Content.Headers)
                                    headers_[item_.Key] = item_.Value;
                            }

                            ProcessResponse(client_, response_);

                            var status_ = (int)response_.StatusCode;
                            if (status_ == 200)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<PaginatedListOfAffiliateAdDto>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                return objectResponse_.Object;
                            }
                            else
                            if (status_ == 400)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 401)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 403)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 500)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ExceptionProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ExceptionProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            {
                                var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                                throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                            }
                        }
                        finally
                        {
                            if (disposeResponse_)
                                response_.Dispose();
                        }
                    }
                }
                finally
                {
                    if (disposeClient_)
                        client_.Dispose();
                }
            }

            /// <summary>
            /// Deletes an existing affiliate ad
            /// </summary>
            /// <exception cref="ApiException">A server side error occurred.</exception>
            public virtual System.Threading.Tasks.Task DeleteAsync(System.Guid id, string version)
            {
                return DeleteAsync(id, version, System.Threading.CancellationToken.None);
            }

            /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            /// <summary>
            /// Deletes an existing affiliate ad
            /// </summary>
            /// <exception cref="ApiException">A server side error occurred.</exception>
            public virtual async System.Threading.Tasks.Task DeleteAsync(System.Guid id, string version, System.Threading.CancellationToken cancellationToken)
            {
                if (id == null)
                    throw new System.ArgumentNullException("id");

                if (version == null)
                    throw new System.ArgumentNullException("version");

                var client_ = _httpClient;
                var disposeClient_ = false;
                try
                {
                    using (var request_ = new System.Net.Http.HttpRequestMessage())
                    {
                        request_.Method = new System.Net.Http.HttpMethod("DELETE");

                        var urlBuilder_ = new System.Text.StringBuilder();
                        if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                        // Operation Path: "api/v{version}/AffiliateAds/{id}"
                        urlBuilder_.Append("api/v");
                        urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                        urlBuilder_.Append("/AffiliateAds/");
                        urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                        PrepareRequest(client_, request_, urlBuilder_);

                        var url_ = urlBuilder_.ToString();
                        request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                        PrepareRequest(client_, request_, url_);

                        var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                        var disposeResponse_ = true;
                        try
                        {
                            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                            foreach (var item_ in response_.Headers)
                                headers_[item_.Key] = item_.Value;
                            if (response_.Content != null && response_.Content.Headers != null)
                            {
                                foreach (var item_ in response_.Content.Headers)
                                    headers_[item_.Key] = item_.Value;
                            }

                            ProcessResponse(client_, response_);

                            var status_ = (int)response_.StatusCode;
                            if (status_ == 204)
                            {
                                return;
                            }
                            else
                            if (status_ == 400)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 401)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 403)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 422)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ValidationProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 500)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ExceptionProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ExceptionProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            {
                                var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                                throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                            }
                        }
                        finally
                        {
                            if (disposeResponse_)
                                response_.Dispose();
                        }
                    }
                }
                finally
                {
                    if (disposeClient_)
                        client_.Dispose();
                }
            }

            /// <summary>
            /// Gets an affiliate ad by id
            /// </summary>
            /// <exception cref="ApiException">A server side error occurred.</exception>
            public virtual System.Threading.Tasks.Task<PaginatedListOfAffiliateAdDto> GetAffiliateAdAsync(System.Guid id, string version)
            {
                return GetAffiliateAdAsync(id, version, System.Threading.CancellationToken.None);
            }

            /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            /// <summary>
            /// Gets an affiliate ad by id
            /// </summary>
            /// <exception cref="ApiException">A server side error occurred.</exception>
            public virtual async System.Threading.Tasks.Task<PaginatedListOfAffiliateAdDto> GetAffiliateAdAsync(System.Guid id, string version, System.Threading.CancellationToken cancellationToken)
            {
                if (id == null)
                    throw new System.ArgumentNullException("id");

                if (version == null)
                    throw new System.ArgumentNullException("version");

                var client_ = _httpClient;
                var disposeClient_ = false;
                try
                {
                    using (var request_ = new System.Net.Http.HttpRequestMessage())
                    {
                        request_.Method = new System.Net.Http.HttpMethod("GET");
                        request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                        var urlBuilder_ = new System.Text.StringBuilder();
                        if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                        // Operation Path: "api/v{version}/AffiliateAds/{id}"
                        urlBuilder_.Append("api/v");
                        urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                        urlBuilder_.Append("/AffiliateAds/");
                        urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                        PrepareRequest(client_, request_, urlBuilder_);

                        var url_ = urlBuilder_.ToString();
                        request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                        PrepareRequest(client_, request_, url_);

                        var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                        var disposeResponse_ = true;
                        try
                        {
                            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                            foreach (var item_ in response_.Headers)
                                headers_[item_.Key] = item_.Value;
                            if (response_.Content != null && response_.Content.Headers != null)
                            {
                                foreach (var item_ in response_.Content.Headers)
                                    headers_[item_.Key] = item_.Value;
                            }

                            ProcessResponse(client_, response_);

                            var status_ = (int)response_.StatusCode;
                            if (status_ == 200)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<PaginatedListOfAffiliateAdDto>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                return objectResponse_.Object;
                            }
                            else
                            if (status_ == 400)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 401)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 403)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 500)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ExceptionProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ExceptionProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            {
                                var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                                throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                            }
                        }
                        finally
                        {
                            if (disposeResponse_)
                                response_.Dispose();
                        }
                    }
                }
                finally
                {
                    if (disposeClient_)
                        client_.Dispose();
                }
            }

            protected struct ObjectResponseResult<T>
            {
                public ObjectResponseResult(T responseObject, string responseText)
                {
                    this.Object = responseObject;
                    this.Text = responseText;
                }

                public T Object { get; }

                public string Text { get; }
            }

            public bool ReadResponseAsString { get; set; }

            protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
            {
                if (response == null || response.Content == null)
                {
                    return new ObjectResponseResult<T>(default(T)!, string.Empty);
                }

                if (ReadResponseAsString)
                {
                    var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                    try
                    {
                        var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                        return new ObjectResponseResult<T>(typedBody!, responseText);
                    }
                    catch (System.Text.Json.JsonException exception)
                    {
                        var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                        throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                    }
                }
                else
                {
                    try
                    {
                        using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                        {
                            var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                            return new ObjectResponseResult<T>(typedBody!, string.Empty);
                        }
                    }
                    catch (System.Text.Json.JsonException exception)
                    {
                        var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                        throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                    }
                }
            }

            private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
            {
                if (value == null)
                {
                    return "";
                }

                if (value is System.Enum)
                {
                    var name = System.Enum.GetName(value.GetType(), value);
                    if (name != null)
                    {
                        var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                        if (field != null)
                        {
                            var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                                as System.Runtime.Serialization.EnumMemberAttribute;
                            if (attribute != null)
                            {
                                return attribute.Value != null ? attribute.Value : name;
                            }
                        }

                        var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                        return converted == null ? string.Empty : converted;
                    }
                }
                else if (value is bool)
                {
                    return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
                }
                else if (value is byte[])
                {
                    return System.Convert.ToBase64String((byte[])value);
                }
                else if (value is string[])
                {
                    return string.Join(",", (string[])value);
                }
                else if (value.GetType().IsArray)
                {
                    var valueArray = (System.Array)value;
                    var valueTextArray = new string[valueArray.Length];
                    for (var i = 0; i < valueArray.Length; i++)
                    {
                        valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                    }
                    return string.Join(",", valueTextArray);
                }

                var result = System.Convert.ToString(value, cultureInfo);
                return result == null ? "" : result;
            }
        }

        [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
        public partial class CaptchaClient
        {
#pragma warning disable 8618
            private string _baseUrl;
#pragma warning restore 8618

            private System.Net.Http.HttpClient _httpClient;
            private static System.Lazy<System.Text.Json.JsonSerializerOptions> _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings, true);
            private System.Text.Json.JsonSerializerOptions _instanceSettings;

#pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
            public CaptchaClient(string baseUrl, System.Net.Http.HttpClient httpClient)
#pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
            {
                BaseUrl = baseUrl;
                _httpClient = httpClient;
                Initialize();
            }

            private static System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
            {
                var settings = new System.Text.Json.JsonSerializerOptions();
                UpdateJsonSerializerSettings(settings);
                return settings;
            }

            public string BaseUrl
            {
                get { return _baseUrl; }
                set
                {
                    _baseUrl = value;
                    if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                        _baseUrl += '/';
                }
            }

            protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

            static partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

            partial void Initialize();

            partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
            partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
            partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

            /// <exception cref="ApiException">A server side error occurred.</exception>
            public virtual System.Threading.Tasks.Task<CaptchaChallengeResponseDto> RequestChallengeAsync(string version)
            {
                return RequestChallengeAsync(version, System.Threading.CancellationToken.None);
            }

            /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            /// <exception cref="ApiException">A server side error occurred.</exception>
            public virtual async System.Threading.Tasks.Task<CaptchaChallengeResponseDto> RequestChallengeAsync(string version, System.Threading.CancellationToken cancellationToken)
            {
                if (version == null)
                    throw new System.ArgumentNullException("version");

                var client_ = _httpClient;
                var disposeClient_ = false;
                try
                {
                    using (var request_ = new System.Net.Http.HttpRequestMessage())
                    {
                        request_.Method = new System.Net.Http.HttpMethod("GET");
                        request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                        var urlBuilder_ = new System.Text.StringBuilder();
                        if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                        // Operation Path: "api/v{version}/Captcha/challenge"
                        urlBuilder_.Append("api/v");
                        urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                        urlBuilder_.Append("/Captcha/challenge");

                        PrepareRequest(client_, request_, urlBuilder_);

                        var url_ = urlBuilder_.ToString();
                        request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                        PrepareRequest(client_, request_, url_);

                        var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                        var disposeResponse_ = true;
                        try
                        {
                            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                            foreach (var item_ in response_.Headers)
                                headers_[item_.Key] = item_.Value;
                            if (response_.Content != null && response_.Content.Headers != null)
                            {
                                foreach (var item_ in response_.Content.Headers)
                                    headers_[item_.Key] = item_.Value;
                            }

                            ProcessResponse(client_, response_);

                            var status_ = (int)response_.StatusCode;
                            if (status_ == 200)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<CaptchaChallengeResponseDto>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                return objectResponse_.Object;
                            }
                            else
                            if (status_ == 400)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            {
                                var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                                throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                            }
                        }
                        finally
                        {
                            if (disposeResponse_)
                                response_.Dispose();
                        }
                    }
                }
                finally
                {
                    if (disposeClient_)
                        client_.Dispose();
                }
            }

            /// <exception cref="ApiException">A server side error occurred.</exception>
            public virtual System.Threading.Tasks.Task<CaptchaVerificationResultDto> RequestVerificationAsync(string version, ValidateCaptchaRequest request)
            {
                return RequestVerificationAsync(version, request, System.Threading.CancellationToken.None);
            }

            /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            /// <exception cref="ApiException">A server side error occurred.</exception>
            public virtual async System.Threading.Tasks.Task<CaptchaVerificationResultDto> RequestVerificationAsync(string version, ValidateCaptchaRequest request, System.Threading.CancellationToken cancellationToken)
            {
                if (version == null)
                    throw new System.ArgumentNullException("version");

                if (request == null)
                    throw new System.ArgumentNullException("request");

                var client_ = _httpClient;
                var disposeClient_ = false;
                try
                {
                    using (var request_ = new System.Net.Http.HttpRequestMessage())
                    {
                        var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(request, JsonSerializerSettings);
                        var content_ = new System.Net.Http.ByteArrayContent(json_);
                        content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                        request_.Content = content_;
                        request_.Method = new System.Net.Http.HttpMethod("POST");
                        request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                        var urlBuilder_ = new System.Text.StringBuilder();
                        if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                        // Operation Path: "api/v{version}/Captcha/verify"
                        urlBuilder_.Append("api/v");
                        urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                        urlBuilder_.Append("/Captcha/verify");

                        PrepareRequest(client_, request_, urlBuilder_);

                        var url_ = urlBuilder_.ToString();
                        request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                        PrepareRequest(client_, request_, url_);

                        var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                        var disposeResponse_ = true;
                        try
                        {
                            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                            foreach (var item_ in response_.Headers)
                                headers_[item_.Key] = item_.Value;
                            if (response_.Content != null && response_.Content.Headers != null)
                            {
                                foreach (var item_ in response_.Content.Headers)
                                    headers_[item_.Key] = item_.Value;
                            }

                            ProcessResponse(client_, response_);

                            var status_ = (int)response_.StatusCode;
                            if (status_ == 200)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<CaptchaVerificationResultDto>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                return objectResponse_.Object;
                            }
                            else
                            if (status_ == 400)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<CaptchaVerificationResultDto>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<CaptchaVerificationResultDto>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            {
                                var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                                throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                            }
                        }
                        finally
                        {
                            if (disposeResponse_)
                                response_.Dispose();
                        }
                    }
                }
                finally
                {
                    if (disposeClient_)
                        client_.Dispose();
                }
            }

            protected struct ObjectResponseResult<T>
            {
                public ObjectResponseResult(T responseObject, string responseText)
                {
                    this.Object = responseObject;
                    this.Text = responseText;
                }

                public T Object { get; }

                public string Text { get; }
            }

            public bool ReadResponseAsString { get; set; }

            protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
            {
                if (response == null || response.Content == null)
                {
                    return new ObjectResponseResult<T>(default(T)!, string.Empty);
                }

                if (ReadResponseAsString)
                {
                    var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                    try
                    {
                        var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                        return new ObjectResponseResult<T>(typedBody!, responseText);
                    }
                    catch (System.Text.Json.JsonException exception)
                    {
                        var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                        throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                    }
                }
                else
                {
                    try
                    {
                        using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                        {
                            var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                            return new ObjectResponseResult<T>(typedBody!, string.Empty);
                        }
                    }
                    catch (System.Text.Json.JsonException exception)
                    {
                        var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                        throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                    }
                }
            }

            private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
            {
                if (value == null)
                {
                    return "";
                }

                if (value is System.Enum)
                {
                    var name = System.Enum.GetName(value.GetType(), value);
                    if (name != null)
                    {
                        var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                        if (field != null)
                        {
                            var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                                as System.Runtime.Serialization.EnumMemberAttribute;
                            if (attribute != null)
                            {
                                return attribute.Value != null ? attribute.Value : name;
                            }
                        }

                        var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                        return converted == null ? string.Empty : converted;
                    }
                }
                else if (value is bool)
                {
                    return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
                }
                else if (value is byte[])
                {
                    return System.Convert.ToBase64String((byte[])value);
                }
                else if (value is string[])
                {
                    return string.Join(",", (string[])value);
                }
                else if (value.GetType().IsArray)
                {
                    var valueArray = (System.Array)value;
                    var valueTextArray = new string[valueArray.Length];
                    for (var i = 0; i < valueArray.Length; i++)
                    {
                        valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                    }
                    return string.Join(",", valueTextArray);
                }

                var result = System.Convert.ToString(value, cultureInfo);
                return result == null ? "" : result;
            }
        }

        [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
        public partial class FAQCategoriesClient
        {
#pragma warning disable 8618
            private string _baseUrl;
#pragma warning restore 8618

            private System.Net.Http.HttpClient _httpClient;
            private static System.Lazy<System.Text.Json.JsonSerializerOptions> _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings, true);
            private System.Text.Json.JsonSerializerOptions _instanceSettings;

#pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
            public FAQCategoriesClient(string baseUrl, System.Net.Http.HttpClient httpClient)
#pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
            {
                BaseUrl = baseUrl;
                _httpClient = httpClient;
                Initialize();
            }

            private static System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
            {
                var settings = new System.Text.Json.JsonSerializerOptions();
                UpdateJsonSerializerSettings(settings);
                return settings;
            }

            public string BaseUrl
            {
                get { return _baseUrl; }
                set
                {
                    _baseUrl = value;
                    if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                        _baseUrl += '/';
                }
            }

            protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

            static partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

            partial void Initialize();

            partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
            partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
            partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

            /// <exception cref="ApiException">A server side error occurred.</exception>
            public virtual System.Threading.Tasks.Task<System.Guid> CreateAsync(string version, CreateFAQCategoryCommand command)
            {
                return CreateAsync(version, command, System.Threading.CancellationToken.None);
            }

            /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            /// <exception cref="ApiException">A server side error occurred.</exception>
            public virtual async System.Threading.Tasks.Task<System.Guid> CreateAsync(string version, CreateFAQCategoryCommand command, System.Threading.CancellationToken cancellationToken)
            {
                if (version == null)
                    throw new System.ArgumentNullException("version");

                if (command == null)
                    throw new System.ArgumentNullException("command");

                var client_ = _httpClient;
                var disposeClient_ = false;
                try
                {
                    using (var request_ = new System.Net.Http.HttpRequestMessage())
                    {
                        var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(command, JsonSerializerSettings);
                        var content_ = new System.Net.Http.ByteArrayContent(json_);
                        content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                        request_.Content = content_;
                        request_.Method = new System.Net.Http.HttpMethod("POST");
                        request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                        var urlBuilder_ = new System.Text.StringBuilder();
                        if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                        // Operation Path: "api/v{version}/FAQCategories"
                        urlBuilder_.Append("api/v");
                        urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                        urlBuilder_.Append("/FAQCategories");

                        PrepareRequest(client_, request_, urlBuilder_);

                        var url_ = urlBuilder_.ToString();
                        request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                        PrepareRequest(client_, request_, url_);

                        var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                        var disposeResponse_ = true;
                        try
                        {
                            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                            foreach (var item_ in response_.Headers)
                                headers_[item_.Key] = item_.Value;
                            if (response_.Content != null && response_.Content.Headers != null)
                            {
                                foreach (var item_ in response_.Content.Headers)
                                    headers_[item_.Key] = item_.Value;
                            }

                            ProcessResponse(client_, response_);

                            var status_ = (int)response_.StatusCode;
                            if (status_ == 201)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<System.Guid>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                return objectResponse_.Object;
                            }
                            else
                            if (status_ == 400)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 401)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 403)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 422)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ValidationProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 500)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ExceptionProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ExceptionProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            {
                                var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                                throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                            }
                        }
                        finally
                        {
                            if (disposeResponse_)
                                response_.Dispose();
                        }
                    }
                }
                finally
                {
                    if (disposeClient_)
                        client_.Dispose();
                }
            }

            /// <exception cref="ApiException">A server side error occurred.</exception>
            public virtual System.Threading.Tasks.Task UpdateAsync(string version, UpdateFAQCategoryCommand command)
            {
                return UpdateAsync(version, command, System.Threading.CancellationToken.None);
            }

            /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            /// <exception cref="ApiException">A server side error occurred.</exception>
            public virtual async System.Threading.Tasks.Task UpdateAsync(string version, UpdateFAQCategoryCommand command, System.Threading.CancellationToken cancellationToken)
            {
                if (version == null)
                    throw new System.ArgumentNullException("version");

                if (command == null)
                    throw new System.ArgumentNullException("command");

                var client_ = _httpClient;
                var disposeClient_ = false;
                try
                {
                    using (var request_ = new System.Net.Http.HttpRequestMessage())
                    {
                        var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(command, JsonSerializerSettings);
                        var content_ = new System.Net.Http.ByteArrayContent(json_);
                        content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                        request_.Content = content_;
                        request_.Method = new System.Net.Http.HttpMethod("PUT");

                        var urlBuilder_ = new System.Text.StringBuilder();
                        if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                        // Operation Path: "api/v{version}/FAQCategories"
                        urlBuilder_.Append("api/v");
                        urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                        urlBuilder_.Append("/FAQCategories");

                        PrepareRequest(client_, request_, urlBuilder_);

                        var url_ = urlBuilder_.ToString();
                        request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                        PrepareRequest(client_, request_, url_);

                        var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                        var disposeResponse_ = true;
                        try
                        {
                            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                            foreach (var item_ in response_.Headers)
                                headers_[item_.Key] = item_.Value;
                            if (response_.Content != null && response_.Content.Headers != null)
                            {
                                foreach (var item_ in response_.Content.Headers)
                                    headers_[item_.Key] = item_.Value;
                            }

                            ProcessResponse(client_, response_);

                            var status_ = (int)response_.StatusCode;
                            if (status_ == 204)
                            {
                                return;
                            }
                            else
                            if (status_ == 400)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 401)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 403)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 422)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ValidationProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 500)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ExceptionProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ExceptionProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            {
                                var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                                throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                            }
                        }
                        finally
                        {
                            if (disposeResponse_)
                                response_.Dispose();
                        }
                    }
                }
                finally
                {
                    if (disposeClient_)
                        client_.Dispose();
                }
            }

            /// <exception cref="ApiException">A server side error occurred.</exception>
            public virtual System.Threading.Tasks.Task<PaginatedListOfFAQCategoryDto> GetPagedConfigurationsAsync(int? pageNumber, int? pageSize, string version)
            {
                return GetPagedConfigurationsAsync(pageNumber, pageSize, version, System.Threading.CancellationToken.None);
            }

            /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            /// <exception cref="ApiException">A server side error occurred.</exception>
            public virtual async System.Threading.Tasks.Task<PaginatedListOfFAQCategoryDto> GetPagedConfigurationsAsync(int? pageNumber, int? pageSize, string version, System.Threading.CancellationToken cancellationToken)
            {
                if (version == null)
                    throw new System.ArgumentNullException("version");

                var client_ = _httpClient;
                var disposeClient_ = false;
                try
                {
                    using (var request_ = new System.Net.Http.HttpRequestMessage())
                    {
                        request_.Method = new System.Net.Http.HttpMethod("GET");
                        request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                        var urlBuilder_ = new System.Text.StringBuilder();
                        if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                        // Operation Path: "api/v{version}/FAQCategories"
                        urlBuilder_.Append("api/v");
                        urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                        urlBuilder_.Append("/FAQCategories");
                        urlBuilder_.Append('?');
                        if (pageNumber != null)
                        {
                            urlBuilder_.Append(System.Uri.EscapeDataString("PageNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                        }
                        if (pageSize != null)
                        {
                            urlBuilder_.Append(System.Uri.EscapeDataString("PageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                        }
                        urlBuilder_.Length--;

                        PrepareRequest(client_, request_, urlBuilder_);

                        var url_ = urlBuilder_.ToString();
                        request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                        PrepareRequest(client_, request_, url_);

                        var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                        var disposeResponse_ = true;
                        try
                        {
                            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                            foreach (var item_ in response_.Headers)
                                headers_[item_.Key] = item_.Value;
                            if (response_.Content != null && response_.Content.Headers != null)
                            {
                                foreach (var item_ in response_.Content.Headers)
                                    headers_[item_.Key] = item_.Value;
                            }

                            ProcessResponse(client_, response_);

                            var status_ = (int)response_.StatusCode;
                            if (status_ == 200)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<PaginatedListOfFAQCategoryDto>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                return objectResponse_.Object;
                            }
                            else
                            if (status_ == 400)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 401)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 403)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 500)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ExceptionProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ExceptionProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            {
                                var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                                throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                            }
                        }
                        finally
                        {
                            if (disposeResponse_)
                                response_.Dispose();
                        }
                    }
                }
                finally
                {
                    if (disposeClient_)
                        client_.Dispose();
                }
            }

            /// <exception cref="ApiException">A server side error occurred.</exception>
            public virtual System.Threading.Tasks.Task DeleteAsync(System.Guid id, string version)
            {
                return DeleteAsync(id, version, System.Threading.CancellationToken.None);
            }

            /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            /// <exception cref="ApiException">A server side error occurred.</exception>
            public virtual async System.Threading.Tasks.Task DeleteAsync(System.Guid id, string version, System.Threading.CancellationToken cancellationToken)
            {
                if (id == null)
                    throw new System.ArgumentNullException("id");

                if (version == null)
                    throw new System.ArgumentNullException("version");

                var client_ = _httpClient;
                var disposeClient_ = false;
                try
                {
                    using (var request_ = new System.Net.Http.HttpRequestMessage())
                    {
                        request_.Method = new System.Net.Http.HttpMethod("DELETE");

                        var urlBuilder_ = new System.Text.StringBuilder();
                        if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                        // Operation Path: "api/v{version}/FAQCategories/{id}"
                        urlBuilder_.Append("api/v");
                        urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                        urlBuilder_.Append("/FAQCategories/");
                        urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                        PrepareRequest(client_, request_, urlBuilder_);

                        var url_ = urlBuilder_.ToString();
                        request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                        PrepareRequest(client_, request_, url_);

                        var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                        var disposeResponse_ = true;
                        try
                        {
                            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                            foreach (var item_ in response_.Headers)
                                headers_[item_.Key] = item_.Value;
                            if (response_.Content != null && response_.Content.Headers != null)
                            {
                                foreach (var item_ in response_.Content.Headers)
                                    headers_[item_.Key] = item_.Value;
                            }

                            ProcessResponse(client_, response_);

                            var status_ = (int)response_.StatusCode;
                            if (status_ == 204)
                            {
                                return;
                            }
                            else
                            if (status_ == 400)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 401)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 403)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 422)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ValidationProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 500)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ExceptionProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ExceptionProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            {
                                var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                                throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                            }
                        }
                        finally
                        {
                            if (disposeResponse_)
                                response_.Dispose();
                        }
                    }
                }
                finally
                {
                    if (disposeClient_)
                        client_.Dispose();
                }
            }

            /// <exception cref="ApiException">A server side error occurred.</exception>
            public virtual System.Threading.Tasks.Task<PaginatedListOfFAQCategoryDto> GetConfigurationAsync(System.Guid id, string version)
            {
                return GetConfigurationAsync(id, version, System.Threading.CancellationToken.None);
            }

            /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            /// <exception cref="ApiException">A server side error occurred.</exception>
            public virtual async System.Threading.Tasks.Task<PaginatedListOfFAQCategoryDto> GetConfigurationAsync(System.Guid id, string version, System.Threading.CancellationToken cancellationToken)
            {
                if (id == null)
                    throw new System.ArgumentNullException("id");

                if (version == null)
                    throw new System.ArgumentNullException("version");

                var client_ = _httpClient;
                var disposeClient_ = false;
                try
                {
                    using (var request_ = new System.Net.Http.HttpRequestMessage())
                    {
                        request_.Method = new System.Net.Http.HttpMethod("GET");
                        request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                        var urlBuilder_ = new System.Text.StringBuilder();
                        if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                        // Operation Path: "api/v{version}/FAQCategories/{id}"
                        urlBuilder_.Append("api/v");
                        urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                        urlBuilder_.Append("/FAQCategories/");
                        urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                        PrepareRequest(client_, request_, urlBuilder_);

                        var url_ = urlBuilder_.ToString();
                        request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                        PrepareRequest(client_, request_, url_);

                        var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                        var disposeResponse_ = true;
                        try
                        {
                            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                            foreach (var item_ in response_.Headers)
                                headers_[item_.Key] = item_.Value;
                            if (response_.Content != null && response_.Content.Headers != null)
                            {
                                foreach (var item_ in response_.Content.Headers)
                                    headers_[item_.Key] = item_.Value;
                            }

                            ProcessResponse(client_, response_);

                            var status_ = (int)response_.StatusCode;
                            if (status_ == 200)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<PaginatedListOfFAQCategoryDto>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                return objectResponse_.Object;
                            }
                            else
                            if (status_ == 400)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 401)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 403)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 500)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ExceptionProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ExceptionProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            {
                                var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                                throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                            }
                        }
                        finally
                        {
                            if (disposeResponse_)
                                response_.Dispose();
                        }
                    }
                }
                finally
                {
                    if (disposeClient_)
                        client_.Dispose();
                }
            }

            protected struct ObjectResponseResult<T>
            {
                public ObjectResponseResult(T responseObject, string responseText)
                {
                    this.Object = responseObject;
                    this.Text = responseText;
                }

                public T Object { get; }

                public string Text { get; }
            }

            public bool ReadResponseAsString { get; set; }

            protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
            {
                if (response == null || response.Content == null)
                {
                    return new ObjectResponseResult<T>(default(T)!, string.Empty);
                }

                if (ReadResponseAsString)
                {
                    var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                    try
                    {
                        var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                        return new ObjectResponseResult<T>(typedBody!, responseText);
                    }
                    catch (System.Text.Json.JsonException exception)
                    {
                        var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                        throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                    }
                }
                else
                {
                    try
                    {
                        using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                        {
                            var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                            return new ObjectResponseResult<T>(typedBody!, string.Empty);
                        }
                    }
                    catch (System.Text.Json.JsonException exception)
                    {
                        var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                        throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                    }
                }
            }

            private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
            {
                if (value == null)
                {
                    return "";
                }

                if (value is System.Enum)
                {
                    var name = System.Enum.GetName(value.GetType(), value);
                    if (name != null)
                    {
                        var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                        if (field != null)
                        {
                            var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                                as System.Runtime.Serialization.EnumMemberAttribute;
                            if (attribute != null)
                            {
                                return attribute.Value != null ? attribute.Value : name;
                            }
                        }

                        var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                        return converted == null ? string.Empty : converted;
                    }
                }
                else if (value is bool)
                {
                    return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
                }
                else if (value is byte[])
                {
                    return System.Convert.ToBase64String((byte[])value);
                }
                else if (value is string[])
                {
                    return string.Join(",", (string[])value);
                }
                else if (value.GetType().IsArray)
                {
                    var valueArray = (System.Array)value;
                    var valueTextArray = new string[valueArray.Length];
                    for (var i = 0; i < valueArray.Length; i++)
                    {
                        valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                    }
                    return string.Join(",", valueTextArray);
                }

                var result = System.Convert.ToString(value, cultureInfo);
                return result == null ? "" : result;
            }
        }

        [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
        public partial class FAQItemsClient
        {
#pragma warning disable 8618
            private string _baseUrl;
#pragma warning restore 8618

            private System.Net.Http.HttpClient _httpClient;
            private static System.Lazy<System.Text.Json.JsonSerializerOptions> _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings, true);
            private System.Text.Json.JsonSerializerOptions _instanceSettings;

#pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
            public FAQItemsClient(string baseUrl, System.Net.Http.HttpClient httpClient)
#pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
            {
                BaseUrl = baseUrl;
                _httpClient = httpClient;
                Initialize();
            }

            private static System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
            {
                var settings = new System.Text.Json.JsonSerializerOptions();
                UpdateJsonSerializerSettings(settings);
                return settings;
            }

            public string BaseUrl
            {
                get { return _baseUrl; }
                set
                {
                    _baseUrl = value;
                    if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                        _baseUrl += '/';
                }
            }

            protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

            static partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

            partial void Initialize();

            partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
            partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
            partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

            /// <exception cref="ApiException">A server side error occurred.</exception>
            public virtual System.Threading.Tasks.Task<System.Guid> CreateAsync(string version, CreateFAQItemCommand command)
            {
                return CreateAsync(version, command, System.Threading.CancellationToken.None);
            }

            /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            /// <exception cref="ApiException">A server side error occurred.</exception>
            public virtual async System.Threading.Tasks.Task<System.Guid> CreateAsync(string version, CreateFAQItemCommand command, System.Threading.CancellationToken cancellationToken)
            {
                if (version == null)
                    throw new System.ArgumentNullException("version");

                if (command == null)
                    throw new System.ArgumentNullException("command");

                var client_ = _httpClient;
                var disposeClient_ = false;
                try
                {
                    using (var request_ = new System.Net.Http.HttpRequestMessage())
                    {
                        var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(command, JsonSerializerSettings);
                        var content_ = new System.Net.Http.ByteArrayContent(json_);
                        content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                        request_.Content = content_;
                        request_.Method = new System.Net.Http.HttpMethod("POST");
                        request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                        var urlBuilder_ = new System.Text.StringBuilder();
                        if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                        // Operation Path: "api/v{version}/FAQItems"
                        urlBuilder_.Append("api/v");
                        urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                        urlBuilder_.Append("/FAQItems");

                        PrepareRequest(client_, request_, urlBuilder_);

                        var url_ = urlBuilder_.ToString();
                        request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                        PrepareRequest(client_, request_, url_);

                        var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                        var disposeResponse_ = true;
                        try
                        {
                            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                            foreach (var item_ in response_.Headers)
                                headers_[item_.Key] = item_.Value;
                            if (response_.Content != null && response_.Content.Headers != null)
                            {
                                foreach (var item_ in response_.Content.Headers)
                                    headers_[item_.Key] = item_.Value;
                            }

                            ProcessResponse(client_, response_);

                            var status_ = (int)response_.StatusCode;
                            if (status_ == 201)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<System.Guid>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                return objectResponse_.Object;
                            }
                            else
                            if (status_ == 400)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 401)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 403)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 422)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ValidationProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 500)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ExceptionProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ExceptionProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            {
                                var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                                throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                            }
                        }
                        finally
                        {
                            if (disposeResponse_)
                                response_.Dispose();
                        }
                    }
                }
                finally
                {
                    if (disposeClient_)
                        client_.Dispose();
                }
            }

            /// <exception cref="ApiException">A server side error occurred.</exception>
            public virtual System.Threading.Tasks.Task UpdateAsync(string version, UpdateFAQItemCommand command)
            {
                return UpdateAsync(version, command, System.Threading.CancellationToken.None);
            }

            /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            /// <exception cref="ApiException">A server side error occurred.</exception>
            public virtual async System.Threading.Tasks.Task UpdateAsync(string version, UpdateFAQItemCommand command, System.Threading.CancellationToken cancellationToken)
            {
                if (version == null)
                    throw new System.ArgumentNullException("version");

                if (command == null)
                    throw new System.ArgumentNullException("command");

                var client_ = _httpClient;
                var disposeClient_ = false;
                try
                {
                    using (var request_ = new System.Net.Http.HttpRequestMessage())
                    {
                        var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(command, JsonSerializerSettings);
                        var content_ = new System.Net.Http.ByteArrayContent(json_);
                        content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                        request_.Content = content_;
                        request_.Method = new System.Net.Http.HttpMethod("PUT");

                        var urlBuilder_ = new System.Text.StringBuilder();
                        if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                        // Operation Path: "api/v{version}/FAQItems"
                        urlBuilder_.Append("api/v");
                        urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                        urlBuilder_.Append("/FAQItems");

                        PrepareRequest(client_, request_, urlBuilder_);

                        var url_ = urlBuilder_.ToString();
                        request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                        PrepareRequest(client_, request_, url_);

                        var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                        var disposeResponse_ = true;
                        try
                        {
                            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                            foreach (var item_ in response_.Headers)
                                headers_[item_.Key] = item_.Value;
                            if (response_.Content != null && response_.Content.Headers != null)
                            {
                                foreach (var item_ in response_.Content.Headers)
                                    headers_[item_.Key] = item_.Value;
                            }

                            ProcessResponse(client_, response_);

                            var status_ = (int)response_.StatusCode;
                            if (status_ == 204)
                            {
                                return;
                            }
                            else
                            if (status_ == 400)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 401)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 403)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 422)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ValidationProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 500)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ExceptionProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ExceptionProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            {
                                var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                                throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                            }
                        }
                        finally
                        {
                            if (disposeResponse_)
                                response_.Dispose();
                        }
                    }
                }
                finally
                {
                    if (disposeClient_)
                        client_.Dispose();
                }
            }

            /// <exception cref="ApiException">A server side error occurred.</exception>
            public virtual System.Threading.Tasks.Task<PaginatedListOfFAQItemDto> GetPagedConfigurationsAsync(int? pageNumber, int? pageSize, string version)
            {
                return GetPagedConfigurationsAsync(pageNumber, pageSize, version, System.Threading.CancellationToken.None);
            }

            /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            /// <exception cref="ApiException">A server side error occurred.</exception>
            public virtual async System.Threading.Tasks.Task<PaginatedListOfFAQItemDto> GetPagedConfigurationsAsync(int? pageNumber, int? pageSize, string version, System.Threading.CancellationToken cancellationToken)
            {
                if (version == null)
                    throw new System.ArgumentNullException("version");

                var client_ = _httpClient;
                var disposeClient_ = false;
                try
                {
                    using (var request_ = new System.Net.Http.HttpRequestMessage())
                    {
                        request_.Method = new System.Net.Http.HttpMethod("GET");
                        request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                        var urlBuilder_ = new System.Text.StringBuilder();
                        if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                        // Operation Path: "api/v{version}/FAQItems"
                        urlBuilder_.Append("api/v");
                        urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                        urlBuilder_.Append("/FAQItems");
                        urlBuilder_.Append('?');
                        if (pageNumber != null)
                        {
                            urlBuilder_.Append(System.Uri.EscapeDataString("PageNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                        }
                        if (pageSize != null)
                        {
                            urlBuilder_.Append(System.Uri.EscapeDataString("PageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                        }
                        urlBuilder_.Length--;

                        PrepareRequest(client_, request_, urlBuilder_);

                        var url_ = urlBuilder_.ToString();
                        request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                        PrepareRequest(client_, request_, url_);

                        var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                        var disposeResponse_ = true;
                        try
                        {
                            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                            foreach (var item_ in response_.Headers)
                                headers_[item_.Key] = item_.Value;
                            if (response_.Content != null && response_.Content.Headers != null)
                            {
                                foreach (var item_ in response_.Content.Headers)
                                    headers_[item_.Key] = item_.Value;
                            }

                            ProcessResponse(client_, response_);

                            var status_ = (int)response_.StatusCode;
                            if (status_ == 200)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<PaginatedListOfFAQItemDto>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                return objectResponse_.Object;
                            }
                            else
                            if (status_ == 400)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 401)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 403)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 500)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ExceptionProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ExceptionProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            {
                                var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                                throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                            }
                        }
                        finally
                        {
                            if (disposeResponse_)
                                response_.Dispose();
                        }
                    }
                }
                finally
                {
                    if (disposeClient_)
                        client_.Dispose();
                }
            }

            /// <exception cref="ApiException">A server side error occurred.</exception>
            public virtual System.Threading.Tasks.Task DeleteAsync(System.Guid id, string version)
            {
                return DeleteAsync(id, version, System.Threading.CancellationToken.None);
            }

            /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            /// <exception cref="ApiException">A server side error occurred.</exception>
            public virtual async System.Threading.Tasks.Task DeleteAsync(System.Guid id, string version, System.Threading.CancellationToken cancellationToken)
            {
                if (id == null)
                    throw new System.ArgumentNullException("id");

                if (version == null)
                    throw new System.ArgumentNullException("version");

                var client_ = _httpClient;
                var disposeClient_ = false;
                try
                {
                    using (var request_ = new System.Net.Http.HttpRequestMessage())
                    {
                        request_.Method = new System.Net.Http.HttpMethod("DELETE");

                        var urlBuilder_ = new System.Text.StringBuilder();
                        if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                        // Operation Path: "api/v{version}/FAQItems/{id}"
                        urlBuilder_.Append("api/v");
                        urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                        urlBuilder_.Append("/FAQItems/");
                        urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                        PrepareRequest(client_, request_, urlBuilder_);

                        var url_ = urlBuilder_.ToString();
                        request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                        PrepareRequest(client_, request_, url_);

                        var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                        var disposeResponse_ = true;
                        try
                        {
                            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                            foreach (var item_ in response_.Headers)
                                headers_[item_.Key] = item_.Value;
                            if (response_.Content != null && response_.Content.Headers != null)
                            {
                                foreach (var item_ in response_.Content.Headers)
                                    headers_[item_.Key] = item_.Value;
                            }

                            ProcessResponse(client_, response_);

                            var status_ = (int)response_.StatusCode;
                            if (status_ == 204)
                            {
                                return;
                            }
                            else
                            if (status_ == 400)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 401)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 403)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 422)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ValidationProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 500)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ExceptionProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ExceptionProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            {
                                var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                                throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                            }
                        }
                        finally
                        {
                            if (disposeResponse_)
                                response_.Dispose();
                        }
                    }
                }
                finally
                {
                    if (disposeClient_)
                        client_.Dispose();
                }
            }

            /// <exception cref="ApiException">A server side error occurred.</exception>
            public virtual System.Threading.Tasks.Task<PaginatedListOfFAQItemDto> GetConfigurationAsync(System.Guid id, string version)
            {
                return GetConfigurationAsync(id, version, System.Threading.CancellationToken.None);
            }

            /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            /// <exception cref="ApiException">A server side error occurred.</exception>
            public virtual async System.Threading.Tasks.Task<PaginatedListOfFAQItemDto> GetConfigurationAsync(System.Guid id, string version, System.Threading.CancellationToken cancellationToken)
            {
                if (id == null)
                    throw new System.ArgumentNullException("id");

                if (version == null)
                    throw new System.ArgumentNullException("version");

                var client_ = _httpClient;
                var disposeClient_ = false;
                try
                {
                    using (var request_ = new System.Net.Http.HttpRequestMessage())
                    {
                        request_.Method = new System.Net.Http.HttpMethod("GET");
                        request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                        var urlBuilder_ = new System.Text.StringBuilder();
                        if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                        // Operation Path: "api/v{version}/FAQItems/{id}"
                        urlBuilder_.Append("api/v");
                        urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                        urlBuilder_.Append("/FAQItems/");
                        urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                        PrepareRequest(client_, request_, urlBuilder_);

                        var url_ = urlBuilder_.ToString();
                        request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                        PrepareRequest(client_, request_, url_);

                        var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                        var disposeResponse_ = true;
                        try
                        {
                            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                            foreach (var item_ in response_.Headers)
                                headers_[item_.Key] = item_.Value;
                            if (response_.Content != null && response_.Content.Headers != null)
                            {
                                foreach (var item_ in response_.Content.Headers)
                                    headers_[item_.Key] = item_.Value;
                            }

                            ProcessResponse(client_, response_);

                            var status_ = (int)response_.StatusCode;
                            if (status_ == 200)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<PaginatedListOfFAQItemDto>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                return objectResponse_.Object;
                            }
                            else
                            if (status_ == 400)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 401)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 403)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 500)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ExceptionProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ExceptionProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            {
                                var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                                throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                            }
                        }
                        finally
                        {
                            if (disposeResponse_)
                                response_.Dispose();
                        }
                    }
                }
                finally
                {
                    if (disposeClient_)
                        client_.Dispose();
                }
            }

            protected struct ObjectResponseResult<T>
            {
                public ObjectResponseResult(T responseObject, string responseText)
                {
                    this.Object = responseObject;
                    this.Text = responseText;
                }

                public T Object { get; }

                public string Text { get; }
            }

            public bool ReadResponseAsString { get; set; }

            protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
            {
                if (response == null || response.Content == null)
                {
                    return new ObjectResponseResult<T>(default(T)!, string.Empty);
                }

                if (ReadResponseAsString)
                {
                    var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                    try
                    {
                        var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                        return new ObjectResponseResult<T>(typedBody!, responseText);
                    }
                    catch (System.Text.Json.JsonException exception)
                    {
                        var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                        throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                    }
                }
                else
                {
                    try
                    {
                        using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                        {
                            var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                            return new ObjectResponseResult<T>(typedBody!, string.Empty);
                        }
                    }
                    catch (System.Text.Json.JsonException exception)
                    {
                        var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                        throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                    }
                }
            }

            private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
            {
                if (value == null)
                {
                    return "";
                }

                if (value is System.Enum)
                {
                    var name = System.Enum.GetName(value.GetType(), value);
                    if (name != null)
                    {
                        var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                        if (field != null)
                        {
                            var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                                as System.Runtime.Serialization.EnumMemberAttribute;
                            if (attribute != null)
                            {
                                return attribute.Value != null ? attribute.Value : name;
                            }
                        }

                        var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                        return converted == null ? string.Empty : converted;
                    }
                }
                else if (value is bool)
                {
                    return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
                }
                else if (value is byte[])
                {
                    return System.Convert.ToBase64String((byte[])value);
                }
                else if (value is string[])
                {
                    return string.Join(",", (string[])value);
                }
                else if (value.GetType().IsArray)
                {
                    var valueArray = (System.Array)value;
                    var valueTextArray = new string[valueArray.Length];
                    for (var i = 0; i < valueArray.Length; i++)
                    {
                        valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                    }
                    return string.Join(",", valueTextArray);
                }

                var result = System.Convert.ToString(value, cultureInfo);
                return result == null ? "" : result;
            }
        }

        [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
        public partial class BannerTypesClient
        {
#pragma warning disable 8618
            private string _baseUrl;
#pragma warning restore 8618

            private System.Net.Http.HttpClient _httpClient;
            private static System.Lazy<System.Text.Json.JsonSerializerOptions> _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings, true);
            private System.Text.Json.JsonSerializerOptions _instanceSettings;

#pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
            public BannerTypesClient(string baseUrl, System.Net.Http.HttpClient httpClient)
#pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
            {
                BaseUrl = baseUrl;
                _httpClient = httpClient;
                Initialize();
            }

            private static System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
            {
                var settings = new System.Text.Json.JsonSerializerOptions();
                UpdateJsonSerializerSettings(settings);
                return settings;
            }

            public string BaseUrl
            {
                get { return _baseUrl; }
                set
                {
                    _baseUrl = value;
                    if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                        _baseUrl += '/';
                }
            }

            protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

            static partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

            partial void Initialize();

            partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
            partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
            partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

            /// <exception cref="ApiException">A server side error occurred.</exception>
            public virtual System.Threading.Tasks.Task<System.Guid> CreateAsync(string version, CreateBannerTypeCommand command)
            {
                return CreateAsync(version, command, System.Threading.CancellationToken.None);
            }

            /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            /// <exception cref="ApiException">A server side error occurred.</exception>
            public virtual async System.Threading.Tasks.Task<System.Guid> CreateAsync(string version, CreateBannerTypeCommand command, System.Threading.CancellationToken cancellationToken)
            {
                if (version == null)
                    throw new System.ArgumentNullException("version");

                if (command == null)
                    throw new System.ArgumentNullException("command");

                var client_ = _httpClient;
                var disposeClient_ = false;
                try
                {
                    using (var request_ = new System.Net.Http.HttpRequestMessage())
                    {
                        var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(command, JsonSerializerSettings);
                        var content_ = new System.Net.Http.ByteArrayContent(json_);
                        content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                        request_.Content = content_;
                        request_.Method = new System.Net.Http.HttpMethod("POST");
                        request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                        var urlBuilder_ = new System.Text.StringBuilder();
                        if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                        // Operation Path: "api/v{version}/BannerTypes"
                        urlBuilder_.Append("api/v");
                        urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                        urlBuilder_.Append("/BannerTypes");

                        PrepareRequest(client_, request_, urlBuilder_);

                        var url_ = urlBuilder_.ToString();
                        request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                        PrepareRequest(client_, request_, url_);

                        var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                        var disposeResponse_ = true;
                        try
                        {
                            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                            foreach (var item_ in response_.Headers)
                                headers_[item_.Key] = item_.Value;
                            if (response_.Content != null && response_.Content.Headers != null)
                            {
                                foreach (var item_ in response_.Content.Headers)
                                    headers_[item_.Key] = item_.Value;
                            }

                            ProcessResponse(client_, response_);

                            var status_ = (int)response_.StatusCode;
                            if (status_ == 201)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<System.Guid>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                return objectResponse_.Object;
                            }
                            else
                            if (status_ == 400)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 401)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 403)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 422)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ValidationProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 500)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ExceptionProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ExceptionProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            {
                                var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                                throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                            }
                        }
                        finally
                        {
                            if (disposeResponse_)
                                response_.Dispose();
                        }
                    }
                }
                finally
                {
                    if (disposeClient_)
                        client_.Dispose();
                }
            }

            /// <exception cref="ApiException">A server side error occurred.</exception>
            public virtual System.Threading.Tasks.Task UpdateAsync(string version, UpdateBannerTypeCommand command)
            {
                return UpdateAsync(version, command, System.Threading.CancellationToken.None);
            }

            /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            /// <exception cref="ApiException">A server side error occurred.</exception>
            public virtual async System.Threading.Tasks.Task UpdateAsync(string version, UpdateBannerTypeCommand command, System.Threading.CancellationToken cancellationToken)
            {
                if (version == null)
                    throw new System.ArgumentNullException("version");

                if (command == null)
                    throw new System.ArgumentNullException("command");

                var client_ = _httpClient;
                var disposeClient_ = false;
                try
                {
                    using (var request_ = new System.Net.Http.HttpRequestMessage())
                    {
                        var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(command, JsonSerializerSettings);
                        var content_ = new System.Net.Http.ByteArrayContent(json_);
                        content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                        request_.Content = content_;
                        request_.Method = new System.Net.Http.HttpMethod("PUT");

                        var urlBuilder_ = new System.Text.StringBuilder();
                        if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                        // Operation Path: "api/v{version}/BannerTypes"
                        urlBuilder_.Append("api/v");
                        urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                        urlBuilder_.Append("/BannerTypes");

                        PrepareRequest(client_, request_, urlBuilder_);

                        var url_ = urlBuilder_.ToString();
                        request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                        PrepareRequest(client_, request_, url_);

                        var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                        var disposeResponse_ = true;
                        try
                        {
                            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                            foreach (var item_ in response_.Headers)
                                headers_[item_.Key] = item_.Value;
                            if (response_.Content != null && response_.Content.Headers != null)
                            {
                                foreach (var item_ in response_.Content.Headers)
                                    headers_[item_.Key] = item_.Value;
                            }

                            ProcessResponse(client_, response_);

                            var status_ = (int)response_.StatusCode;
                            if (status_ == 204)
                            {
                                return;
                            }
                            else
                            if (status_ == 400)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 401)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 403)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 422)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ValidationProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 500)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ExceptionProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ExceptionProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            {
                                var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                                throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                            }
                        }
                        finally
                        {
                            if (disposeResponse_)
                                response_.Dispose();
                        }
                    }
                }
                finally
                {
                    if (disposeClient_)
                        client_.Dispose();
                }
            }

            /// <exception cref="ApiException">A server side error occurred.</exception>
            public virtual System.Threading.Tasks.Task<PaginatedListOfBannerTypeDto> GetPagedConfigurationsAsync(int? pageNumber, int? pageSize, string version)
            {
                return GetPagedConfigurationsAsync(pageNumber, pageSize, version, System.Threading.CancellationToken.None);
            }

            /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            /// <exception cref="ApiException">A server side error occurred.</exception>
            public virtual async System.Threading.Tasks.Task<PaginatedListOfBannerTypeDto> GetPagedConfigurationsAsync(int? pageNumber, int? pageSize, string version, System.Threading.CancellationToken cancellationToken)
            {
                if (version == null)
                    throw new System.ArgumentNullException("version");

                var client_ = _httpClient;
                var disposeClient_ = false;
                try
                {
                    using (var request_ = new System.Net.Http.HttpRequestMessage())
                    {
                        request_.Method = new System.Net.Http.HttpMethod("GET");
                        request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                        var urlBuilder_ = new System.Text.StringBuilder();
                        if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                        // Operation Path: "api/v{version}/BannerTypes"
                        urlBuilder_.Append("api/v");
                        urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                        urlBuilder_.Append("/BannerTypes");
                        urlBuilder_.Append('?');
                        if (pageNumber != null)
                        {
                            urlBuilder_.Append(System.Uri.EscapeDataString("PageNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                        }
                        if (pageSize != null)
                        {
                            urlBuilder_.Append(System.Uri.EscapeDataString("PageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                        }
                        urlBuilder_.Length--;

                        PrepareRequest(client_, request_, urlBuilder_);

                        var url_ = urlBuilder_.ToString();
                        request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                        PrepareRequest(client_, request_, url_);

                        var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                        var disposeResponse_ = true;
                        try
                        {
                            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                            foreach (var item_ in response_.Headers)
                                headers_[item_.Key] = item_.Value;
                            if (response_.Content != null && response_.Content.Headers != null)
                            {
                                foreach (var item_ in response_.Content.Headers)
                                    headers_[item_.Key] = item_.Value;
                            }

                            ProcessResponse(client_, response_);

                            var status_ = (int)response_.StatusCode;
                            if (status_ == 200)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<PaginatedListOfBannerTypeDto>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                return objectResponse_.Object;
                            }
                            else
                            if (status_ == 400)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 401)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 403)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 500)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ExceptionProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ExceptionProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            {
                                var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                                throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                            }
                        }
                        finally
                        {
                            if (disposeResponse_)
                                response_.Dispose();
                        }
                    }
                }
                finally
                {
                    if (disposeClient_)
                        client_.Dispose();
                }
            }

            /// <exception cref="ApiException">A server side error occurred.</exception>
            public virtual System.Threading.Tasks.Task DeleteAsync(System.Guid id, string version)
            {
                return DeleteAsync(id, version, System.Threading.CancellationToken.None);
            }

            /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            /// <exception cref="ApiException">A server side error occurred.</exception>
            public virtual async System.Threading.Tasks.Task DeleteAsync(System.Guid id, string version, System.Threading.CancellationToken cancellationToken)
            {
                if (id == null)
                    throw new System.ArgumentNullException("id");

                if (version == null)
                    throw new System.ArgumentNullException("version");

                var client_ = _httpClient;
                var disposeClient_ = false;
                try
                {
                    using (var request_ = new System.Net.Http.HttpRequestMessage())
                    {
                        request_.Method = new System.Net.Http.HttpMethod("DELETE");

                        var urlBuilder_ = new System.Text.StringBuilder();
                        if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                        // Operation Path: "api/v{version}/BannerTypes/{id}"
                        urlBuilder_.Append("api/v");
                        urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                        urlBuilder_.Append("/BannerTypes/");
                        urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                        PrepareRequest(client_, request_, urlBuilder_);

                        var url_ = urlBuilder_.ToString();
                        request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                        PrepareRequest(client_, request_, url_);

                        var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                        var disposeResponse_ = true;
                        try
                        {
                            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                            foreach (var item_ in response_.Headers)
                                headers_[item_.Key] = item_.Value;
                            if (response_.Content != null && response_.Content.Headers != null)
                            {
                                foreach (var item_ in response_.Content.Headers)
                                    headers_[item_.Key] = item_.Value;
                            }

                            ProcessResponse(client_, response_);

                            var status_ = (int)response_.StatusCode;
                            if (status_ == 204)
                            {
                                return;
                            }
                            else
                            if (status_ == 400)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 401)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 403)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 422)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ValidationProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 500)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ExceptionProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ExceptionProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            {
                                var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                                throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                            }
                        }
                        finally
                        {
                            if (disposeResponse_)
                                response_.Dispose();
                        }
                    }
                }
                finally
                {
                    if (disposeClient_)
                        client_.Dispose();
                }
            }

            /// <exception cref="ApiException">A server side error occurred.</exception>
            public virtual System.Threading.Tasks.Task<PaginatedListOfBannerTypeDto> GetConfigurationAsync(System.Guid id, string version)
            {
                return GetConfigurationAsync(id, version, System.Threading.CancellationToken.None);
            }

            /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            /// <exception cref="ApiException">A server side error occurred.</exception>
            public virtual async System.Threading.Tasks.Task<PaginatedListOfBannerTypeDto> GetConfigurationAsync(System.Guid id, string version, System.Threading.CancellationToken cancellationToken)
            {
                if (id == null)
                    throw new System.ArgumentNullException("id");

                if (version == null)
                    throw new System.ArgumentNullException("version");

                var client_ = _httpClient;
                var disposeClient_ = false;
                try
                {
                    using (var request_ = new System.Net.Http.HttpRequestMessage())
                    {
                        request_.Method = new System.Net.Http.HttpMethod("GET");
                        request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                        var urlBuilder_ = new System.Text.StringBuilder();
                        if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                        // Operation Path: "api/v{version}/BannerTypes/{id}"
                        urlBuilder_.Append("api/v");
                        urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                        urlBuilder_.Append("/BannerTypes/");
                        urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                        PrepareRequest(client_, request_, urlBuilder_);

                        var url_ = urlBuilder_.ToString();
                        request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                        PrepareRequest(client_, request_, url_);

                        var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                        var disposeResponse_ = true;
                        try
                        {
                            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                            foreach (var item_ in response_.Headers)
                                headers_[item_.Key] = item_.Value;
                            if (response_.Content != null && response_.Content.Headers != null)
                            {
                                foreach (var item_ in response_.Content.Headers)
                                    headers_[item_.Key] = item_.Value;
                            }

                            ProcessResponse(client_, response_);

                            var status_ = (int)response_.StatusCode;
                            if (status_ == 200)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<PaginatedListOfBannerTypeDto>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                return objectResponse_.Object;
                            }
                            else
                            if (status_ == 400)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 401)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 403)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 500)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ExceptionProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ExceptionProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            {
                                var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                                throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                            }
                        }
                        finally
                        {
                            if (disposeResponse_)
                                response_.Dispose();
                        }
                    }
                }
                finally
                {
                    if (disposeClient_)
                        client_.Dispose();
                }
            }

            protected struct ObjectResponseResult<T>
            {
                public ObjectResponseResult(T responseObject, string responseText)
                {
                    this.Object = responseObject;
                    this.Text = responseText;
                }

                public T Object { get; }

                public string Text { get; }
            }

            public bool ReadResponseAsString { get; set; }

            protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
            {
                if (response == null || response.Content == null)
                {
                    return new ObjectResponseResult<T>(default(T)!, string.Empty);
                }

                if (ReadResponseAsString)
                {
                    var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                    try
                    {
                        var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                        return new ObjectResponseResult<T>(typedBody!, responseText);
                    }
                    catch (System.Text.Json.JsonException exception)
                    {
                        var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                        throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                    }
                }
                else
                {
                    try
                    {
                        using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                        {
                            var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                            return new ObjectResponseResult<T>(typedBody!, string.Empty);
                        }
                    }
                    catch (System.Text.Json.JsonException exception)
                    {
                        var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                        throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                    }
                }
            }

            private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
            {
                if (value == null)
                {
                    return "";
                }

                if (value is System.Enum)
                {
                    var name = System.Enum.GetName(value.GetType(), value);
                    if (name != null)
                    {
                        var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                        if (field != null)
                        {
                            var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                                as System.Runtime.Serialization.EnumMemberAttribute;
                            if (attribute != null)
                            {
                                return attribute.Value != null ? attribute.Value : name;
                            }
                        }

                        var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                        return converted == null ? string.Empty : converted;
                    }
                }
                else if (value is bool)
                {
                    return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
                }
                else if (value is byte[])
                {
                    return System.Convert.ToBase64String((byte[])value);
                }
                else if (value is string[])
                {
                    return string.Join(",", (string[])value);
                }
                else if (value.GetType().IsArray)
                {
                    var valueArray = (System.Array)value;
                    var valueTextArray = new string[valueArray.Length];
                    for (var i = 0; i < valueArray.Length; i++)
                    {
                        valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                    }
                    return string.Join(",", valueTextArray);
                }

                var result = System.Convert.ToString(value, cultureInfo);
                return result == null ? "" : result;
            }
        }

        [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
        public partial class MarketConfigurationsClient
        {
#pragma warning disable 8618
            private string _baseUrl;
#pragma warning restore 8618

            private System.Net.Http.HttpClient _httpClient;
            private static System.Lazy<System.Text.Json.JsonSerializerOptions> _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings, true);
            private System.Text.Json.JsonSerializerOptions _instanceSettings;

#pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
            public MarketConfigurationsClient(string baseUrl, System.Net.Http.HttpClient httpClient)
#pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
            {
                BaseUrl = baseUrl;
                _httpClient = httpClient;
                Initialize();
            }

            private static System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
            {
                var settings = new System.Text.Json.JsonSerializerOptions();
                UpdateJsonSerializerSettings(settings);
                return settings;
            }

            public string BaseUrl
            {
                get { return _baseUrl; }
                set
                {
                    _baseUrl = value;
                    if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                        _baseUrl += '/';
                }
            }

            protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

            static partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

            partial void Initialize();

            partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
            partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
            partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

            /// <exception cref="ApiException">A server side error occurred.</exception>
            public virtual System.Threading.Tasks.Task<System.Guid> CreateAsync(string version, CreateMarketConfigurationCommand command)
            {
                return CreateAsync(version, command, System.Threading.CancellationToken.None);
            }

            /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            /// <exception cref="ApiException">A server side error occurred.</exception>
            public virtual async System.Threading.Tasks.Task<System.Guid> CreateAsync(string version, CreateMarketConfigurationCommand command, System.Threading.CancellationToken cancellationToken)
            {
                if (version == null)
                    throw new System.ArgumentNullException("version");

                if (command == null)
                    throw new System.ArgumentNullException("command");

                var client_ = _httpClient;
                var disposeClient_ = false;
                try
                {
                    using (var request_ = new System.Net.Http.HttpRequestMessage())
                    {
                        var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(command, JsonSerializerSettings);
                        var content_ = new System.Net.Http.ByteArrayContent(json_);
                        content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                        request_.Content = content_;
                        request_.Method = new System.Net.Http.HttpMethod("POST");
                        request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                        var urlBuilder_ = new System.Text.StringBuilder();
                        if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                        // Operation Path: "api/v{version}/MarketConfigurations"
                        urlBuilder_.Append("api/v");
                        urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                        urlBuilder_.Append("/MarketConfigurations");

                        PrepareRequest(client_, request_, urlBuilder_);

                        var url_ = urlBuilder_.ToString();
                        request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                        PrepareRequest(client_, request_, url_);

                        var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                        var disposeResponse_ = true;
                        try
                        {
                            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                            foreach (var item_ in response_.Headers)
                                headers_[item_.Key] = item_.Value;
                            if (response_.Content != null && response_.Content.Headers != null)
                            {
                                foreach (var item_ in response_.Content.Headers)
                                    headers_[item_.Key] = item_.Value;
                            }

                            ProcessResponse(client_, response_);

                            var status_ = (int)response_.StatusCode;
                            if (status_ == 201)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<System.Guid>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                return objectResponse_.Object;
                            }
                            else
                            if (status_ == 400)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 401)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 403)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 422)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ValidationProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 500)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ExceptionProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ExceptionProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            {
                                var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                                throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                            }
                        }
                        finally
                        {
                            if (disposeResponse_)
                                response_.Dispose();
                        }
                    }
                }
                finally
                {
                    if (disposeClient_)
                        client_.Dispose();
                }
            }

            /// <exception cref="ApiException">A server side error occurred.</exception>
            public virtual System.Threading.Tasks.Task UpdateAsync(string version, UpdateMarketConfigurationCommand command)
            {
                return UpdateAsync(version, command, System.Threading.CancellationToken.None);
            }

            /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            /// <exception cref="ApiException">A server side error occurred.</exception>
            public virtual async System.Threading.Tasks.Task UpdateAsync(string version, UpdateMarketConfigurationCommand command, System.Threading.CancellationToken cancellationToken)
            {
                if (version == null)
                    throw new System.ArgumentNullException("version");

                if (command == null)
                    throw new System.ArgumentNullException("command");

                var client_ = _httpClient;
                var disposeClient_ = false;
                try
                {
                    using (var request_ = new System.Net.Http.HttpRequestMessage())
                    {
                        var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(command, JsonSerializerSettings);
                        var content_ = new System.Net.Http.ByteArrayContent(json_);
                        content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                        request_.Content = content_;
                        request_.Method = new System.Net.Http.HttpMethod("PUT");

                        var urlBuilder_ = new System.Text.StringBuilder();
                        if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                        // Operation Path: "api/v{version}/MarketConfigurations"
                        urlBuilder_.Append("api/v");
                        urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                        urlBuilder_.Append("/MarketConfigurations");

                        PrepareRequest(client_, request_, urlBuilder_);

                        var url_ = urlBuilder_.ToString();
                        request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                        PrepareRequest(client_, request_, url_);

                        var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                        var disposeResponse_ = true;
                        try
                        {
                            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                            foreach (var item_ in response_.Headers)
                                headers_[item_.Key] = item_.Value;
                            if (response_.Content != null && response_.Content.Headers != null)
                            {
                                foreach (var item_ in response_.Content.Headers)
                                    headers_[item_.Key] = item_.Value;
                            }

                            ProcessResponse(client_, response_);

                            var status_ = (int)response_.StatusCode;
                            if (status_ == 204)
                            {
                                return;
                            }
                            else
                            if (status_ == 400)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 401)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 403)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 422)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ValidationProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 500)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ExceptionProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ExceptionProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            {
                                var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                                throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                            }
                        }
                        finally
                        {
                            if (disposeResponse_)
                                response_.Dispose();
                        }
                    }
                }
                finally
                {
                    if (disposeClient_)
                        client_.Dispose();
                }
            }

            /// <exception cref="ApiException">A server side error occurred.</exception>
            public virtual System.Threading.Tasks.Task<PaginatedListOfMarketConfigurationDto> GetPagedConfigurationsAsync(int? pageNumber, int? pageSize, string version)
            {
                return GetPagedConfigurationsAsync(pageNumber, pageSize, version, System.Threading.CancellationToken.None);
            }

            /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            /// <exception cref="ApiException">A server side error occurred.</exception>
            public virtual async System.Threading.Tasks.Task<PaginatedListOfMarketConfigurationDto> GetPagedConfigurationsAsync(int? pageNumber, int? pageSize, string version, System.Threading.CancellationToken cancellationToken)
            {
                if (version == null)
                    throw new System.ArgumentNullException("version");

                var client_ = _httpClient;
                var disposeClient_ = false;
                try
                {
                    using (var request_ = new System.Net.Http.HttpRequestMessage())
                    {
                        request_.Method = new System.Net.Http.HttpMethod("GET");
                        request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                        var urlBuilder_ = new System.Text.StringBuilder();
                        if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                        // Operation Path: "api/v{version}/MarketConfigurations"
                        urlBuilder_.Append("api/v");
                        urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                        urlBuilder_.Append("/MarketConfigurations");
                        urlBuilder_.Append('?');
                        if (pageNumber != null)
                        {
                            urlBuilder_.Append(System.Uri.EscapeDataString("PageNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                        }
                        if (pageSize != null)
                        {
                            urlBuilder_.Append(System.Uri.EscapeDataString("PageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                        }
                        urlBuilder_.Length--;

                        PrepareRequest(client_, request_, urlBuilder_);

                        var url_ = urlBuilder_.ToString();
                        request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                        PrepareRequest(client_, request_, url_);

                        var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                        var disposeResponse_ = true;
                        try
                        {
                            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                            foreach (var item_ in response_.Headers)
                                headers_[item_.Key] = item_.Value;
                            if (response_.Content != null && response_.Content.Headers != null)
                            {
                                foreach (var item_ in response_.Content.Headers)
                                    headers_[item_.Key] = item_.Value;
                            }

                            ProcessResponse(client_, response_);

                            var status_ = (int)response_.StatusCode;
                            if (status_ == 200)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<PaginatedListOfMarketConfigurationDto>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                return objectResponse_.Object;
                            }
                            else
                            if (status_ == 400)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 401)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 403)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 500)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ExceptionProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ExceptionProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            {
                                var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                                throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                            }
                        }
                        finally
                        {
                            if (disposeResponse_)
                                response_.Dispose();
                        }
                    }
                }
                finally
                {
                    if (disposeClient_)
                        client_.Dispose();
                }
            }

            /// <exception cref="ApiException">A server side error occurred.</exception>
            public virtual System.Threading.Tasks.Task DeleteAsync(System.Guid id, string version)
            {
                return DeleteAsync(id, version, System.Threading.CancellationToken.None);
            }

            /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            /// <exception cref="ApiException">A server side error occurred.</exception>
            public virtual async System.Threading.Tasks.Task DeleteAsync(System.Guid id, string version, System.Threading.CancellationToken cancellationToken)
            {
                if (id == null)
                    throw new System.ArgumentNullException("id");

                if (version == null)
                    throw new System.ArgumentNullException("version");

                var client_ = _httpClient;
                var disposeClient_ = false;
                try
                {
                    using (var request_ = new System.Net.Http.HttpRequestMessage())
                    {
                        request_.Method = new System.Net.Http.HttpMethod("DELETE");

                        var urlBuilder_ = new System.Text.StringBuilder();
                        if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                        // Operation Path: "api/v{version}/MarketConfigurations/{id}"
                        urlBuilder_.Append("api/v");
                        urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                        urlBuilder_.Append("/MarketConfigurations/");
                        urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                        PrepareRequest(client_, request_, urlBuilder_);

                        var url_ = urlBuilder_.ToString();
                        request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                        PrepareRequest(client_, request_, url_);

                        var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                        var disposeResponse_ = true;
                        try
                        {
                            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                            foreach (var item_ in response_.Headers)
                                headers_[item_.Key] = item_.Value;
                            if (response_.Content != null && response_.Content.Headers != null)
                            {
                                foreach (var item_ in response_.Content.Headers)
                                    headers_[item_.Key] = item_.Value;
                            }

                            ProcessResponse(client_, response_);

                            var status_ = (int)response_.StatusCode;
                            if (status_ == 204)
                            {
                                return;
                            }
                            else
                            if (status_ == 400)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 401)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 403)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 422)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ValidationProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 500)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ExceptionProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ExceptionProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            {
                                var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                                throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                            }
                        }
                        finally
                        {
                            if (disposeResponse_)
                                response_.Dispose();
                        }
                    }
                }
                finally
                {
                    if (disposeClient_)
                        client_.Dispose();
                }
            }

            /// <exception cref="ApiException">A server side error occurred.</exception>
            public virtual System.Threading.Tasks.Task<PaginatedListOfMarketConfigurationDto> GetConfigurationAsync(System.Guid id, string version)
            {
                return GetConfigurationAsync(id, version, System.Threading.CancellationToken.None);
            }

            /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            /// <exception cref="ApiException">A server side error occurred.</exception>
            public virtual async System.Threading.Tasks.Task<PaginatedListOfMarketConfigurationDto> GetConfigurationAsync(System.Guid id, string version, System.Threading.CancellationToken cancellationToken)
            {
                if (id == null)
                    throw new System.ArgumentNullException("id");

                if (version == null)
                    throw new System.ArgumentNullException("version");

                var client_ = _httpClient;
                var disposeClient_ = false;
                try
                {
                    using (var request_ = new System.Net.Http.HttpRequestMessage())
                    {
                        request_.Method = new System.Net.Http.HttpMethod("GET");
                        request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                        var urlBuilder_ = new System.Text.StringBuilder();
                        if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                        // Operation Path: "api/v{version}/MarketConfigurations/{id}"
                        urlBuilder_.Append("api/v");
                        urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                        urlBuilder_.Append("/MarketConfigurations/");
                        urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                        PrepareRequest(client_, request_, urlBuilder_);

                        var url_ = urlBuilder_.ToString();
                        request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                        PrepareRequest(client_, request_, url_);

                        var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                        var disposeResponse_ = true;
                        try
                        {
                            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                            foreach (var item_ in response_.Headers)
                                headers_[item_.Key] = item_.Value;
                            if (response_.Content != null && response_.Content.Headers != null)
                            {
                                foreach (var item_ in response_.Content.Headers)
                                    headers_[item_.Key] = item_.Value;
                            }

                            ProcessResponse(client_, response_);

                            var status_ = (int)response_.StatusCode;
                            if (status_ == 200)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<PaginatedListOfMarketConfigurationDto>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                return objectResponse_.Object;
                            }
                            else
                            if (status_ == 400)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 401)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 403)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 500)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ExceptionProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ExceptionProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            {
                                var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                                throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                            }
                        }
                        finally
                        {
                            if (disposeResponse_)
                                response_.Dispose();
                        }
                    }
                }
                finally
                {
                    if (disposeClient_)
                        client_.Dispose();
                }
            }

            protected struct ObjectResponseResult<T>
            {
                public ObjectResponseResult(T responseObject, string responseText)
                {
                    this.Object = responseObject;
                    this.Text = responseText;
                }

                public T Object { get; }

                public string Text { get; }
            }

            public bool ReadResponseAsString { get; set; }

            protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
            {
                if (response == null || response.Content == null)
                {
                    return new ObjectResponseResult<T>(default(T)!, string.Empty);
                }

                if (ReadResponseAsString)
                {
                    var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                    try
                    {
                        var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                        return new ObjectResponseResult<T>(typedBody!, responseText);
                    }
                    catch (System.Text.Json.JsonException exception)
                    {
                        var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                        throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                    }
                }
                else
                {
                    try
                    {
                        using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                        {
                            var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                            return new ObjectResponseResult<T>(typedBody!, string.Empty);
                        }
                    }
                    catch (System.Text.Json.JsonException exception)
                    {
                        var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                        throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                    }
                }
            }

            private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
            {
                if (value == null)
                {
                    return "";
                }

                if (value is System.Enum)
                {
                    var name = System.Enum.GetName(value.GetType(), value);
                    if (name != null)
                    {
                        var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                        if (field != null)
                        {
                            var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                                as System.Runtime.Serialization.EnumMemberAttribute;
                            if (attribute != null)
                            {
                                return attribute.Value != null ? attribute.Value : name;
                            }
                        }

                        var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                        return converted == null ? string.Empty : converted;
                    }
                }
                else if (value is bool)
                {
                    return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
                }
                else if (value is byte[])
                {
                    return System.Convert.ToBase64String((byte[])value);
                }
                else if (value is string[])
                {
                    return string.Join(",", (string[])value);
                }
                else if (value.GetType().IsArray)
                {
                    var valueArray = (System.Array)value;
                    var valueTextArray = new string[valueArray.Length];
                    for (var i = 0; i < valueArray.Length; i++)
                    {
                        valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                    }
                    return string.Join(",", valueTextArray);
                }

                var result = System.Convert.ToString(value, cultureInfo);
                return result == null ? "" : result;
            }
        }

        [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
        public partial class MarketThemesClient
        {
#pragma warning disable 8618
            private string _baseUrl;
#pragma warning restore 8618

            private System.Net.Http.HttpClient _httpClient;
            private static System.Lazy<System.Text.Json.JsonSerializerOptions> _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings, true);
            private System.Text.Json.JsonSerializerOptions _instanceSettings;

#pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
            public MarketThemesClient(string baseUrl, System.Net.Http.HttpClient httpClient)
#pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
            {
                BaseUrl = baseUrl;
                _httpClient = httpClient;
                Initialize();
            }

            private static System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
            {
                var settings = new System.Text.Json.JsonSerializerOptions();
                UpdateJsonSerializerSettings(settings);
                return settings;
            }

            public string BaseUrl
            {
                get { return _baseUrl; }
                set
                {
                    _baseUrl = value;
                    if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                        _baseUrl += '/';
                }
            }

            protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

            static partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

            partial void Initialize();

            partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
            partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
            partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

            /// <exception cref="ApiException">A server side error occurred.</exception>
            public virtual System.Threading.Tasks.Task<System.Guid> CreateAsync(string version, CreateMarketThemeCommand command)
            {
                return CreateAsync(version, command, System.Threading.CancellationToken.None);
            }

            /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            /// <exception cref="ApiException">A server side error occurred.</exception>
            public virtual async System.Threading.Tasks.Task<System.Guid> CreateAsync(string version, CreateMarketThemeCommand command, System.Threading.CancellationToken cancellationToken)
            {
                if (version == null)
                    throw new System.ArgumentNullException("version");

                if (command == null)
                    throw new System.ArgumentNullException("command");

                var client_ = _httpClient;
                var disposeClient_ = false;
                try
                {
                    using (var request_ = new System.Net.Http.HttpRequestMessage())
                    {
                        var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(command, JsonSerializerSettings);
                        var content_ = new System.Net.Http.ByteArrayContent(json_);
                        content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                        request_.Content = content_;
                        request_.Method = new System.Net.Http.HttpMethod("POST");
                        request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                        var urlBuilder_ = new System.Text.StringBuilder();
                        if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                        // Operation Path: "api/v{version}/MarketThemes"
                        urlBuilder_.Append("api/v");
                        urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                        urlBuilder_.Append("/MarketThemes");

                        PrepareRequest(client_, request_, urlBuilder_);

                        var url_ = urlBuilder_.ToString();
                        request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                        PrepareRequest(client_, request_, url_);

                        var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                        var disposeResponse_ = true;
                        try
                        {
                            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                            foreach (var item_ in response_.Headers)
                                headers_[item_.Key] = item_.Value;
                            if (response_.Content != null && response_.Content.Headers != null)
                            {
                                foreach (var item_ in response_.Content.Headers)
                                    headers_[item_.Key] = item_.Value;
                            }

                            ProcessResponse(client_, response_);

                            var status_ = (int)response_.StatusCode;
                            if (status_ == 201)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<System.Guid>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                return objectResponse_.Object;
                            }
                            else
                            if (status_ == 400)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 401)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 403)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 422)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ValidationProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 500)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ExceptionProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ExceptionProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            {
                                var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                                throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                            }
                        }
                        finally
                        {
                            if (disposeResponse_)
                                response_.Dispose();
                        }
                    }
                }
                finally
                {
                    if (disposeClient_)
                        client_.Dispose();
                }
            }

            /// <exception cref="ApiException">A server side error occurred.</exception>
            public virtual System.Threading.Tasks.Task UpdateAsync(string version, UpdateMarketThemeCommand command)
            {
                return UpdateAsync(version, command, System.Threading.CancellationToken.None);
            }

            /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            /// <exception cref="ApiException">A server side error occurred.</exception>
            public virtual async System.Threading.Tasks.Task UpdateAsync(string version, UpdateMarketThemeCommand command, System.Threading.CancellationToken cancellationToken)
            {
                if (version == null)
                    throw new System.ArgumentNullException("version");

                if (command == null)
                    throw new System.ArgumentNullException("command");

                var client_ = _httpClient;
                var disposeClient_ = false;
                try
                {
                    using (var request_ = new System.Net.Http.HttpRequestMessage())
                    {
                        var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(command, JsonSerializerSettings);
                        var content_ = new System.Net.Http.ByteArrayContent(json_);
                        content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                        request_.Content = content_;
                        request_.Method = new System.Net.Http.HttpMethod("PUT");

                        var urlBuilder_ = new System.Text.StringBuilder();
                        if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                        // Operation Path: "api/v{version}/MarketThemes"
                        urlBuilder_.Append("api/v");
                        urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                        urlBuilder_.Append("/MarketThemes");

                        PrepareRequest(client_, request_, urlBuilder_);

                        var url_ = urlBuilder_.ToString();
                        request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                        PrepareRequest(client_, request_, url_);

                        var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                        var disposeResponse_ = true;
                        try
                        {
                            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                            foreach (var item_ in response_.Headers)
                                headers_[item_.Key] = item_.Value;
                            if (response_.Content != null && response_.Content.Headers != null)
                            {
                                foreach (var item_ in response_.Content.Headers)
                                    headers_[item_.Key] = item_.Value;
                            }

                            ProcessResponse(client_, response_);

                            var status_ = (int)response_.StatusCode;
                            if (status_ == 204)
                            {
                                return;
                            }
                            else
                            if (status_ == 400)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 401)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 403)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 422)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ValidationProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 500)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ExceptionProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ExceptionProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            {
                                var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                                throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                            }
                        }
                        finally
                        {
                            if (disposeResponse_)
                                response_.Dispose();
                        }
                    }
                }
                finally
                {
                    if (disposeClient_)
                        client_.Dispose();
                }
            }

            /// <exception cref="ApiException">A server side error occurred.</exception>
            public virtual System.Threading.Tasks.Task<PaginatedListOfMarketThemeDto> GetPagedConfigurationsAsync(int? pageNumber, int? pageSize, string version)
            {
                return GetPagedConfigurationsAsync(pageNumber, pageSize, version, System.Threading.CancellationToken.None);
            }

            /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            /// <exception cref="ApiException">A server side error occurred.</exception>
            public virtual async System.Threading.Tasks.Task<PaginatedListOfMarketThemeDto> GetPagedConfigurationsAsync(int? pageNumber, int? pageSize, string version, System.Threading.CancellationToken cancellationToken)
            {
                if (version == null)
                    throw new System.ArgumentNullException("version");

                var client_ = _httpClient;
                var disposeClient_ = false;
                try
                {
                    using (var request_ = new System.Net.Http.HttpRequestMessage())
                    {
                        request_.Method = new System.Net.Http.HttpMethod("GET");
                        request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                        var urlBuilder_ = new System.Text.StringBuilder();
                        if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                        // Operation Path: "api/v{version}/MarketThemes"
                        urlBuilder_.Append("api/v");
                        urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                        urlBuilder_.Append("/MarketThemes");
                        urlBuilder_.Append('?');
                        if (pageNumber != null)
                        {
                            urlBuilder_.Append(System.Uri.EscapeDataString("PageNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                        }
                        if (pageSize != null)
                        {
                            urlBuilder_.Append(System.Uri.EscapeDataString("PageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                        }
                        urlBuilder_.Length--;

                        PrepareRequest(client_, request_, urlBuilder_);

                        var url_ = urlBuilder_.ToString();
                        request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                        PrepareRequest(client_, request_, url_);

                        var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                        var disposeResponse_ = true;
                        try
                        {
                            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                            foreach (var item_ in response_.Headers)
                                headers_[item_.Key] = item_.Value;
                            if (response_.Content != null && response_.Content.Headers != null)
                            {
                                foreach (var item_ in response_.Content.Headers)
                                    headers_[item_.Key] = item_.Value;
                            }

                            ProcessResponse(client_, response_);

                            var status_ = (int)response_.StatusCode;
                            if (status_ == 200)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<PaginatedListOfMarketThemeDto>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                return objectResponse_.Object;
                            }
                            else
                            if (status_ == 400)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 401)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 403)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 500)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ExceptionProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ExceptionProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            {
                                var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                                throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                            }
                        }
                        finally
                        {
                            if (disposeResponse_)
                                response_.Dispose();
                        }
                    }
                }
                finally
                {
                    if (disposeClient_)
                        client_.Dispose();
                }
            }

            /// <exception cref="ApiException">A server side error occurred.</exception>
            public virtual System.Threading.Tasks.Task DeleteAsync(System.Guid id, string version)
            {
                return DeleteAsync(id, version, System.Threading.CancellationToken.None);
            }

            /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            /// <exception cref="ApiException">A server side error occurred.</exception>
            public virtual async System.Threading.Tasks.Task DeleteAsync(System.Guid id, string version, System.Threading.CancellationToken cancellationToken)
            {
                if (id == null)
                    throw new System.ArgumentNullException("id");

                if (version == null)
                    throw new System.ArgumentNullException("version");

                var client_ = _httpClient;
                var disposeClient_ = false;
                try
                {
                    using (var request_ = new System.Net.Http.HttpRequestMessage())
                    {
                        request_.Method = new System.Net.Http.HttpMethod("DELETE");

                        var urlBuilder_ = new System.Text.StringBuilder();
                        if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                        // Operation Path: "api/v{version}/MarketThemes/{id}"
                        urlBuilder_.Append("api/v");
                        urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                        urlBuilder_.Append("/MarketThemes/");
                        urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                        PrepareRequest(client_, request_, urlBuilder_);

                        var url_ = urlBuilder_.ToString();
                        request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                        PrepareRequest(client_, request_, url_);

                        var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                        var disposeResponse_ = true;
                        try
                        {
                            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                            foreach (var item_ in response_.Headers)
                                headers_[item_.Key] = item_.Value;
                            if (response_.Content != null && response_.Content.Headers != null)
                            {
                                foreach (var item_ in response_.Content.Headers)
                                    headers_[item_.Key] = item_.Value;
                            }

                            ProcessResponse(client_, response_);

                            var status_ = (int)response_.StatusCode;
                            if (status_ == 204)
                            {
                                return;
                            }
                            else
                            if (status_ == 400)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 401)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 403)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 422)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ValidationProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 500)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ExceptionProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ExceptionProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            {
                                var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                                throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                            }
                        }
                        finally
                        {
                            if (disposeResponse_)
                                response_.Dispose();
                        }
                    }
                }
                finally
                {
                    if (disposeClient_)
                        client_.Dispose();
                }
            }

            /// <exception cref="ApiException">A server side error occurred.</exception>
            public virtual System.Threading.Tasks.Task<PaginatedListOfMarketThemeDto> GetConfigurationAsync(System.Guid id, string version)
            {
                return GetConfigurationAsync(id, version, System.Threading.CancellationToken.None);
            }

            /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            /// <exception cref="ApiException">A server side error occurred.</exception>
            public virtual async System.Threading.Tasks.Task<PaginatedListOfMarketThemeDto> GetConfigurationAsync(System.Guid id, string version, System.Threading.CancellationToken cancellationToken)
            {
                if (id == null)
                    throw new System.ArgumentNullException("id");

                if (version == null)
                    throw new System.ArgumentNullException("version");

                var client_ = _httpClient;
                var disposeClient_ = false;
                try
                {
                    using (var request_ = new System.Net.Http.HttpRequestMessage())
                    {
                        request_.Method = new System.Net.Http.HttpMethod("GET");
                        request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                        var urlBuilder_ = new System.Text.StringBuilder();
                        if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                        // Operation Path: "api/v{version}/MarketThemes/{id}"
                        urlBuilder_.Append("api/v");
                        urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                        urlBuilder_.Append("/MarketThemes/");
                        urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                        PrepareRequest(client_, request_, urlBuilder_);

                        var url_ = urlBuilder_.ToString();
                        request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                        PrepareRequest(client_, request_, url_);

                        var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                        var disposeResponse_ = true;
                        try
                        {
                            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                            foreach (var item_ in response_.Headers)
                                headers_[item_.Key] = item_.Value;
                            if (response_.Content != null && response_.Content.Headers != null)
                            {
                                foreach (var item_ in response_.Content.Headers)
                                    headers_[item_.Key] = item_.Value;
                            }

                            ProcessResponse(client_, response_);

                            var status_ = (int)response_.StatusCode;
                            if (status_ == 200)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<PaginatedListOfMarketThemeDto>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                return objectResponse_.Object;
                            }
                            else
                            if (status_ == 400)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 401)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 403)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 500)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ExceptionProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ExceptionProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            {
                                var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                                throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                            }
                        }
                        finally
                        {
                            if (disposeResponse_)
                                response_.Dispose();
                        }
                    }
                }
                finally
                {
                    if (disposeClient_)
                        client_.Dispose();
                }
            }

            protected struct ObjectResponseResult<T>
            {
                public ObjectResponseResult(T responseObject, string responseText)
                {
                    this.Object = responseObject;
                    this.Text = responseText;
                }

                public T Object { get; }

                public string Text { get; }
            }

            public bool ReadResponseAsString { get; set; }

            protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
            {
                if (response == null || response.Content == null)
                {
                    return new ObjectResponseResult<T>(default(T)!, string.Empty);
                }

                if (ReadResponseAsString)
                {
                    var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                    try
                    {
                        var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                        return new ObjectResponseResult<T>(typedBody!, responseText);
                    }
                    catch (System.Text.Json.JsonException exception)
                    {
                        var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                        throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                    }
                }
                else
                {
                    try
                    {
                        using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                        {
                            var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                            return new ObjectResponseResult<T>(typedBody!, string.Empty);
                        }
                    }
                    catch (System.Text.Json.JsonException exception)
                    {
                        var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                        throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                    }
                }
            }

            private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
            {
                if (value == null)
                {
                    return "";
                }

                if (value is System.Enum)
                {
                    var name = System.Enum.GetName(value.GetType(), value);
                    if (name != null)
                    {
                        var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                        if (field != null)
                        {
                            var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                                as System.Runtime.Serialization.EnumMemberAttribute;
                            if (attribute != null)
                            {
                                return attribute.Value != null ? attribute.Value : name;
                            }
                        }

                        var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                        return converted == null ? string.Empty : converted;
                    }
                }
                else if (value is bool)
                {
                    return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
                }
                else if (value is byte[])
                {
                    return System.Convert.ToBase64String((byte[])value);
                }
                else if (value is string[])
                {
                    return string.Join(",", (string[])value);
                }
                else if (value.GetType().IsArray)
                {
                    var valueArray = (System.Array)value;
                    var valueTextArray = new string[valueArray.Length];
                    for (var i = 0; i < valueArray.Length; i++)
                    {
                        valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                    }
                    return string.Join(",", valueTextArray);
                }

                var result = System.Convert.ToString(value, cultureInfo);
                return result == null ? "" : result;
            }
        }

        [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
        public partial class NewsArticlesClient
        {
#pragma warning disable 8618
            private string _baseUrl;
#pragma warning restore 8618

            private System.Net.Http.HttpClient _httpClient;
            private static System.Lazy<System.Text.Json.JsonSerializerOptions> _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings, true);
            private System.Text.Json.JsonSerializerOptions _instanceSettings;

#pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
            public NewsArticlesClient(string baseUrl, System.Net.Http.HttpClient httpClient)
#pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
            {
                BaseUrl = baseUrl;
                _httpClient = httpClient;
                Initialize();
            }

            private static System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
            {
                var settings = new System.Text.Json.JsonSerializerOptions();
                UpdateJsonSerializerSettings(settings);
                return settings;
            }

            public string BaseUrl
            {
                get { return _baseUrl; }
                set
                {
                    _baseUrl = value;
                    if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                        _baseUrl += '/';
                }
            }

            protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

            static partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

            partial void Initialize();

            partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
            partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
            partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

            /// <exception cref="ApiException">A server side error occurred.</exception>
            public virtual System.Threading.Tasks.Task<System.Guid> CreateAsync(string version, CreateNewsArticleCommand command)
            {
                return CreateAsync(version, command, System.Threading.CancellationToken.None);
            }

            /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            /// <exception cref="ApiException">A server side error occurred.</exception>
            public virtual async System.Threading.Tasks.Task<System.Guid> CreateAsync(string version, CreateNewsArticleCommand command, System.Threading.CancellationToken cancellationToken)
            {
                if (version == null)
                    throw new System.ArgumentNullException("version");

                if (command == null)
                    throw new System.ArgumentNullException("command");

                var client_ = _httpClient;
                var disposeClient_ = false;
                try
                {
                    using (var request_ = new System.Net.Http.HttpRequestMessage())
                    {
                        var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(command, JsonSerializerSettings);
                        var content_ = new System.Net.Http.ByteArrayContent(json_);
                        content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                        request_.Content = content_;
                        request_.Method = new System.Net.Http.HttpMethod("POST");
                        request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                        var urlBuilder_ = new System.Text.StringBuilder();
                        if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                        // Operation Path: "api/v{version}/NewsArticles"
                        urlBuilder_.Append("api/v");
                        urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                        urlBuilder_.Append("/NewsArticles");

                        PrepareRequest(client_, request_, urlBuilder_);

                        var url_ = urlBuilder_.ToString();
                        request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                        PrepareRequest(client_, request_, url_);

                        var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                        var disposeResponse_ = true;
                        try
                        {
                            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                            foreach (var item_ in response_.Headers)
                                headers_[item_.Key] = item_.Value;
                            if (response_.Content != null && response_.Content.Headers != null)
                            {
                                foreach (var item_ in response_.Content.Headers)
                                    headers_[item_.Key] = item_.Value;
                            }

                            ProcessResponse(client_, response_);

                            var status_ = (int)response_.StatusCode;
                            if (status_ == 201)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<System.Guid>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                return objectResponse_.Object;
                            }
                            else
                            if (status_ == 400)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 401)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 403)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 422)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ValidationProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 500)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ExceptionProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ExceptionProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            {
                                var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                                throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                            }
                        }
                        finally
                        {
                            if (disposeResponse_)
                                response_.Dispose();
                        }
                    }
                }
                finally
                {
                    if (disposeClient_)
                        client_.Dispose();
                }
            }

            /// <exception cref="ApiException">A server side error occurred.</exception>
            public virtual System.Threading.Tasks.Task UpdateAsync(string version, UpdateNewsArticleCommand command)
            {
                return UpdateAsync(version, command, System.Threading.CancellationToken.None);
            }

            /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            /// <exception cref="ApiException">A server side error occurred.</exception>
            public virtual async System.Threading.Tasks.Task UpdateAsync(string version, UpdateNewsArticleCommand command, System.Threading.CancellationToken cancellationToken)
            {
                if (version == null)
                    throw new System.ArgumentNullException("version");

                if (command == null)
                    throw new System.ArgumentNullException("command");

                var client_ = _httpClient;
                var disposeClient_ = false;
                try
                {
                    using (var request_ = new System.Net.Http.HttpRequestMessage())
                    {
                        var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(command, JsonSerializerSettings);
                        var content_ = new System.Net.Http.ByteArrayContent(json_);
                        content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                        request_.Content = content_;
                        request_.Method = new System.Net.Http.HttpMethod("PUT");

                        var urlBuilder_ = new System.Text.StringBuilder();
                        if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                        // Operation Path: "api/v{version}/NewsArticles"
                        urlBuilder_.Append("api/v");
                        urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                        urlBuilder_.Append("/NewsArticles");

                        PrepareRequest(client_, request_, urlBuilder_);

                        var url_ = urlBuilder_.ToString();
                        request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                        PrepareRequest(client_, request_, url_);

                        var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                        var disposeResponse_ = true;
                        try
                        {
                            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                            foreach (var item_ in response_.Headers)
                                headers_[item_.Key] = item_.Value;
                            if (response_.Content != null && response_.Content.Headers != null)
                            {
                                foreach (var item_ in response_.Content.Headers)
                                    headers_[item_.Key] = item_.Value;
                            }

                            ProcessResponse(client_, response_);

                            var status_ = (int)response_.StatusCode;
                            if (status_ == 204)
                            {
                                return;
                            }
                            else
                            if (status_ == 400)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 401)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 403)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 422)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ValidationProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 500)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ExceptionProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ExceptionProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            {
                                var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                                throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                            }
                        }
                        finally
                        {
                            if (disposeResponse_)
                                response_.Dispose();
                        }
                    }
                }
                finally
                {
                    if (disposeClient_)
                        client_.Dispose();
                }
            }

            /// <exception cref="ApiException">A server side error occurred.</exception>
            public virtual System.Threading.Tasks.Task<PaginatedListOfNewsArticleDto> GetPagedConfigurationsAsync(int? pageNumber, int? pageSize, string version)
            {
                return GetPagedConfigurationsAsync(pageNumber, pageSize, version, System.Threading.CancellationToken.None);
            }

            /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            /// <exception cref="ApiException">A server side error occurred.</exception>
            public virtual async System.Threading.Tasks.Task<PaginatedListOfNewsArticleDto> GetPagedConfigurationsAsync(int? pageNumber, int? pageSize, string version, System.Threading.CancellationToken cancellationToken)
            {
                if (version == null)
                    throw new System.ArgumentNullException("version");

                var client_ = _httpClient;
                var disposeClient_ = false;
                try
                {
                    using (var request_ = new System.Net.Http.HttpRequestMessage())
                    {
                        request_.Method = new System.Net.Http.HttpMethod("GET");
                        request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                        var urlBuilder_ = new System.Text.StringBuilder();
                        if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                        // Operation Path: "api/v{version}/NewsArticles"
                        urlBuilder_.Append("api/v");
                        urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                        urlBuilder_.Append("/NewsArticles");
                        urlBuilder_.Append('?');
                        if (pageNumber != null)
                        {
                            urlBuilder_.Append(System.Uri.EscapeDataString("PageNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                        }
                        if (pageSize != null)
                        {
                            urlBuilder_.Append(System.Uri.EscapeDataString("PageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                        }
                        urlBuilder_.Length--;

                        PrepareRequest(client_, request_, urlBuilder_);

                        var url_ = urlBuilder_.ToString();
                        request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                        PrepareRequest(client_, request_, url_);

                        var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                        var disposeResponse_ = true;
                        try
                        {
                            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                            foreach (var item_ in response_.Headers)
                                headers_[item_.Key] = item_.Value;
                            if (response_.Content != null && response_.Content.Headers != null)
                            {
                                foreach (var item_ in response_.Content.Headers)
                                    headers_[item_.Key] = item_.Value;
                            }

                            ProcessResponse(client_, response_);

                            var status_ = (int)response_.StatusCode;
                            if (status_ == 200)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<PaginatedListOfNewsArticleDto>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                return objectResponse_.Object;
                            }
                            else
                            if (status_ == 400)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 401)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 403)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 500)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ExceptionProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ExceptionProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            {
                                var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                                throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                            }
                        }
                        finally
                        {
                            if (disposeResponse_)
                                response_.Dispose();
                        }
                    }
                }
                finally
                {
                    if (disposeClient_)
                        client_.Dispose();
                }
            }

            /// <exception cref="ApiException">A server side error occurred.</exception>
            public virtual System.Threading.Tasks.Task DeleteAsync(System.Guid id, string version)
            {
                return DeleteAsync(id, version, System.Threading.CancellationToken.None);
            }

            /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            /// <exception cref="ApiException">A server side error occurred.</exception>
            public virtual async System.Threading.Tasks.Task DeleteAsync(System.Guid id, string version, System.Threading.CancellationToken cancellationToken)
            {
                if (id == null)
                    throw new System.ArgumentNullException("id");

                if (version == null)
                    throw new System.ArgumentNullException("version");

                var client_ = _httpClient;
                var disposeClient_ = false;
                try
                {
                    using (var request_ = new System.Net.Http.HttpRequestMessage())
                    {
                        request_.Method = new System.Net.Http.HttpMethod("DELETE");

                        var urlBuilder_ = new System.Text.StringBuilder();
                        if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                        // Operation Path: "api/v{version}/NewsArticles/{id}"
                        urlBuilder_.Append("api/v");
                        urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                        urlBuilder_.Append("/NewsArticles/");
                        urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                        PrepareRequest(client_, request_, urlBuilder_);

                        var url_ = urlBuilder_.ToString();
                        request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                        PrepareRequest(client_, request_, url_);

                        var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                        var disposeResponse_ = true;
                        try
                        {
                            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                            foreach (var item_ in response_.Headers)
                                headers_[item_.Key] = item_.Value;
                            if (response_.Content != null && response_.Content.Headers != null)
                            {
                                foreach (var item_ in response_.Content.Headers)
                                    headers_[item_.Key] = item_.Value;
                            }

                            ProcessResponse(client_, response_);

                            var status_ = (int)response_.StatusCode;
                            if (status_ == 204)
                            {
                                return;
                            }
                            else
                            if (status_ == 400)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 401)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 403)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 422)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ValidationProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 500)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ExceptionProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ExceptionProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            {
                                var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                                throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                            }
                        }
                        finally
                        {
                            if (disposeResponse_)
                                response_.Dispose();
                        }
                    }
                }
                finally
                {
                    if (disposeClient_)
                        client_.Dispose();
                }
            }

            /// <exception cref="ApiException">A server side error occurred.</exception>
            public virtual System.Threading.Tasks.Task<PaginatedListOfNewsArticleDto> GetConfigurationAsync(System.Guid id, string version)
            {
                return GetConfigurationAsync(id, version, System.Threading.CancellationToken.None);
            }

            /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            /// <exception cref="ApiException">A server side error occurred.</exception>
            public virtual async System.Threading.Tasks.Task<PaginatedListOfNewsArticleDto> GetConfigurationAsync(System.Guid id, string version, System.Threading.CancellationToken cancellationToken)
            {
                if (id == null)
                    throw new System.ArgumentNullException("id");

                if (version == null)
                    throw new System.ArgumentNullException("version");

                var client_ = _httpClient;
                var disposeClient_ = false;
                try
                {
                    using (var request_ = new System.Net.Http.HttpRequestMessage())
                    {
                        request_.Method = new System.Net.Http.HttpMethod("GET");
                        request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                        var urlBuilder_ = new System.Text.StringBuilder();
                        if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                        // Operation Path: "api/v{version}/NewsArticles/{id}"
                        urlBuilder_.Append("api/v");
                        urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                        urlBuilder_.Append("/NewsArticles/");
                        urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                        PrepareRequest(client_, request_, urlBuilder_);

                        var url_ = urlBuilder_.ToString();
                        request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                        PrepareRequest(client_, request_, url_);

                        var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                        var disposeResponse_ = true;
                        try
                        {
                            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                            foreach (var item_ in response_.Headers)
                                headers_[item_.Key] = item_.Value;
                            if (response_.Content != null && response_.Content.Headers != null)
                            {
                                foreach (var item_ in response_.Content.Headers)
                                    headers_[item_.Key] = item_.Value;
                            }

                            ProcessResponse(client_, response_);

                            var status_ = (int)response_.StatusCode;
                            if (status_ == 200)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<PaginatedListOfNewsArticleDto>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                return objectResponse_.Object;
                            }
                            else
                            if (status_ == 400)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 401)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 403)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 500)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ExceptionProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ExceptionProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            {
                                var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                                throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                            }
                        }
                        finally
                        {
                            if (disposeResponse_)
                                response_.Dispose();
                        }
                    }
                }
                finally
                {
                    if (disposeClient_)
                        client_.Dispose();
                }
            }

            protected struct ObjectResponseResult<T>
            {
                public ObjectResponseResult(T responseObject, string responseText)
                {
                    this.Object = responseObject;
                    this.Text = responseText;
                }

                public T Object { get; }

                public string Text { get; }
            }

            public bool ReadResponseAsString { get; set; }

            protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
            {
                if (response == null || response.Content == null)
                {
                    return new ObjectResponseResult<T>(default(T)!, string.Empty);
                }

                if (ReadResponseAsString)
                {
                    var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                    try
                    {
                        var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                        return new ObjectResponseResult<T>(typedBody!, responseText);
                    }
                    catch (System.Text.Json.JsonException exception)
                    {
                        var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                        throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                    }
                }
                else
                {
                    try
                    {
                        using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                        {
                            var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                            return new ObjectResponseResult<T>(typedBody!, string.Empty);
                        }
                    }
                    catch (System.Text.Json.JsonException exception)
                    {
                        var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                        throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                    }
                }
            }

            private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
            {
                if (value == null)
                {
                    return "";
                }

                if (value is System.Enum)
                {
                    var name = System.Enum.GetName(value.GetType(), value);
                    if (name != null)
                    {
                        var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                        if (field != null)
                        {
                            var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                                as System.Runtime.Serialization.EnumMemberAttribute;
                            if (attribute != null)
                            {
                                return attribute.Value != null ? attribute.Value : name;
                            }
                        }

                        var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                        return converted == null ? string.Empty : converted;
                    }
                }
                else if (value is bool)
                {
                    return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
                }
                else if (value is byte[])
                {
                    return System.Convert.ToBase64String((byte[])value);
                }
                else if (value is string[])
                {
                    return string.Join(",", (string[])value);
                }
                else if (value.GetType().IsArray)
                {
                    var valueArray = (System.Array)value;
                    var valueTextArray = new string[valueArray.Length];
                    for (var i = 0; i < valueArray.Length; i++)
                    {
                        valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                    }
                    return string.Join(",", valueTextArray);
                }

                var result = System.Convert.ToString(value, cultureInfo);
                return result == null ? "" : result;
            }
        }

        [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
        public partial class UsersClient
        {
#pragma warning disable 8618
            private string _baseUrl;
#pragma warning restore 8618

            private System.Net.Http.HttpClient _httpClient;
            private static System.Lazy<System.Text.Json.JsonSerializerOptions> _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings, true);
            private System.Text.Json.JsonSerializerOptions _instanceSettings;

#pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
            public UsersClient(string baseUrl, System.Net.Http.HttpClient httpClient)
#pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
            {
                BaseUrl = baseUrl;
                _httpClient = httpClient;
                Initialize();
            }

            private static System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
            {
                var settings = new System.Text.Json.JsonSerializerOptions();
                UpdateJsonSerializerSettings(settings);
                return settings;
            }

            public string BaseUrl
            {
                get { return _baseUrl; }
                set
                {
                    _baseUrl = value;
                    if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                        _baseUrl += '/';
                }
            }

            protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

            static partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

            partial void Initialize();

            partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
            partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
            partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

            /// <exception cref="ApiException">A server side error occurred.</exception>
            public virtual System.Threading.Tasks.Task<PaginatedListOfUserProfileDto> GetPagedProfilesAsync(int? pageNumber, int? pageSize, string version)
            {
                return GetPagedProfilesAsync(pageNumber, pageSize, version, System.Threading.CancellationToken.None);
            }

            /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            /// <exception cref="ApiException">A server side error occurred.</exception>
            public virtual async System.Threading.Tasks.Task<PaginatedListOfUserProfileDto> GetPagedProfilesAsync(int? pageNumber, int? pageSize, string version, System.Threading.CancellationToken cancellationToken)
            {
                if (version == null)
                    throw new System.ArgumentNullException("version");

                var client_ = _httpClient;
                var disposeClient_ = false;
                try
                {
                    using (var request_ = new System.Net.Http.HttpRequestMessage())
                    {
                        request_.Method = new System.Net.Http.HttpMethod("GET");
                        request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                        var urlBuilder_ = new System.Text.StringBuilder();
                        if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                        // Operation Path: "api/v{version}/Users"
                        urlBuilder_.Append("api/v");
                        urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                        urlBuilder_.Append("/Users");
                        urlBuilder_.Append('?');
                        if (pageNumber != null)
                        {
                            urlBuilder_.Append(System.Uri.EscapeDataString("PageNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                        }
                        if (pageSize != null)
                        {
                            urlBuilder_.Append(System.Uri.EscapeDataString("PageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                        }
                        urlBuilder_.Length--;

                        PrepareRequest(client_, request_, urlBuilder_);

                        var url_ = urlBuilder_.ToString();
                        request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                        PrepareRequest(client_, request_, url_);

                        var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                        var disposeResponse_ = true;
                        try
                        {
                            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                            foreach (var item_ in response_.Headers)
                                headers_[item_.Key] = item_.Value;
                            if (response_.Content != null && response_.Content.Headers != null)
                            {
                                foreach (var item_ in response_.Content.Headers)
                                    headers_[item_.Key] = item_.Value;
                            }

                            ProcessResponse(client_, response_);

                            var status_ = (int)response_.StatusCode;
                            if (status_ == 200)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<PaginatedListOfUserProfileDto>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                return objectResponse_.Object;
                            }
                            else
                            if (status_ == 400)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 401)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 403)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 500)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ExceptionProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ExceptionProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            {
                                var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                                throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                            }
                        }
                        finally
                        {
                            if (disposeResponse_)
                                response_.Dispose();
                        }
                    }
                }
                finally
                {
                    if (disposeClient_)
                        client_.Dispose();
                }
            }

            /// <exception cref="ApiException">A server side error occurred.</exception>
            public virtual System.Threading.Tasks.Task DeleteAsync(string version, DeleteUserCommand command)
            {
                return DeleteAsync(version, command, System.Threading.CancellationToken.None);
            }

            /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            /// <exception cref="ApiException">A server side error occurred.</exception>
            public virtual async System.Threading.Tasks.Task DeleteAsync(string version, DeleteUserCommand command, System.Threading.CancellationToken cancellationToken)
            {
                if (version == null)
                    throw new System.ArgumentNullException("version");

                if (command == null)
                    throw new System.ArgumentNullException("command");

                var client_ = _httpClient;
                var disposeClient_ = false;
                try
                {
                    using (var request_ = new System.Net.Http.HttpRequestMessage())
                    {
                        var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(command, JsonSerializerSettings);
                        var content_ = new System.Net.Http.ByteArrayContent(json_);
                        content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                        request_.Content = content_;
                        request_.Method = new System.Net.Http.HttpMethod("DELETE");

                        var urlBuilder_ = new System.Text.StringBuilder();
                        if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                        // Operation Path: "api/v{version}/Users"
                        urlBuilder_.Append("api/v");
                        urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                        urlBuilder_.Append("/Users");

                        PrepareRequest(client_, request_, urlBuilder_);

                        var url_ = urlBuilder_.ToString();
                        request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                        PrepareRequest(client_, request_, url_);

                        var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                        var disposeResponse_ = true;
                        try
                        {
                            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                            foreach (var item_ in response_.Headers)
                                headers_[item_.Key] = item_.Value;
                            if (response_.Content != null && response_.Content.Headers != null)
                            {
                                foreach (var item_ in response_.Content.Headers)
                                    headers_[item_.Key] = item_.Value;
                            }

                            ProcessResponse(client_, response_);

                            var status_ = (int)response_.StatusCode;
                            if (status_ == 204)
                            {
                                return;
                            }
                            else
                            if (status_ == 400)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<Result>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<Result>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            {
                                var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                                throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                            }
                        }
                        finally
                        {
                            if (disposeResponse_)
                                response_.Dispose();
                        }
                    }
                }
                finally
                {
                    if (disposeClient_)
                        client_.Dispose();
                }
            }

            /// <exception cref="ApiException">A server side error occurred.</exception>
            public virtual System.Threading.Tasks.Task<PaginatedListOfUserProfileDto> GetCurrentUserProfileAsync(string version)
            {
                return GetCurrentUserProfileAsync(version, System.Threading.CancellationToken.None);
            }

            /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            /// <exception cref="ApiException">A server side error occurred.</exception>
            public virtual async System.Threading.Tasks.Task<PaginatedListOfUserProfileDto> GetCurrentUserProfileAsync(string version, System.Threading.CancellationToken cancellationToken)
            {
                if (version == null)
                    throw new System.ArgumentNullException("version");

                var client_ = _httpClient;
                var disposeClient_ = false;
                try
                {
                    using (var request_ = new System.Net.Http.HttpRequestMessage())
                    {
                        request_.Method = new System.Net.Http.HttpMethod("GET");
                        request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                        var urlBuilder_ = new System.Text.StringBuilder();
                        if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                        // Operation Path: "api/v{version}/Users/current"
                        urlBuilder_.Append("api/v");
                        urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                        urlBuilder_.Append("/Users/current");

                        PrepareRequest(client_, request_, urlBuilder_);

                        var url_ = urlBuilder_.ToString();
                        request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                        PrepareRequest(client_, request_, url_);

                        var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                        var disposeResponse_ = true;
                        try
                        {
                            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                            foreach (var item_ in response_.Headers)
                                headers_[item_.Key] = item_.Value;
                            if (response_.Content != null && response_.Content.Headers != null)
                            {
                                foreach (var item_ in response_.Content.Headers)
                                    headers_[item_.Key] = item_.Value;
                            }

                            ProcessResponse(client_, response_);

                            var status_ = (int)response_.StatusCode;
                            if (status_ == 200)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<PaginatedListOfUserProfileDto>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                return objectResponse_.Object;
                            }
                            else
                            if (status_ == 400)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 401)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 403)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 500)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ExceptionProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ExceptionProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            {
                                var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                                throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                            }
                        }
                        finally
                        {
                            if (disposeResponse_)
                                response_.Dispose();
                        }
                    }
                }
                finally
                {
                    if (disposeClient_)
                        client_.Dispose();
                }
            }

            /// <exception cref="ApiException">A server side error occurred.</exception>
            public virtual System.Threading.Tasks.Task<CreateUserResult> RegisterAsync(string version, CreateUserCommand command)
            {
                return RegisterAsync(version, command, System.Threading.CancellationToken.None);
            }

            /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            /// <exception cref="ApiException">A server side error occurred.</exception>
            public virtual async System.Threading.Tasks.Task<CreateUserResult> RegisterAsync(string version, CreateUserCommand command, System.Threading.CancellationToken cancellationToken)
            {
                if (version == null)
                    throw new System.ArgumentNullException("version");

                if (command == null)
                    throw new System.ArgumentNullException("command");

                var client_ = _httpClient;
                var disposeClient_ = false;
                try
                {
                    using (var request_ = new System.Net.Http.HttpRequestMessage())
                    {
                        var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(command, JsonSerializerSettings);
                        var content_ = new System.Net.Http.ByteArrayContent(json_);
                        content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                        request_.Content = content_;
                        request_.Method = new System.Net.Http.HttpMethod("POST");
                        request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                        var urlBuilder_ = new System.Text.StringBuilder();
                        if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                        // Operation Path: "api/v{version}/Users/register"
                        urlBuilder_.Append("api/v");
                        urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                        urlBuilder_.Append("/Users/register");

                        PrepareRequest(client_, request_, urlBuilder_);

                        var url_ = urlBuilder_.ToString();
                        request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                        PrepareRequest(client_, request_, url_);

                        var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                        var disposeResponse_ = true;
                        try
                        {
                            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                            foreach (var item_ in response_.Headers)
                                headers_[item_.Key] = item_.Value;
                            if (response_.Content != null && response_.Content.Headers != null)
                            {
                                foreach (var item_ in response_.Content.Headers)
                                    headers_[item_.Key] = item_.Value;
                            }

                            ProcessResponse(client_, response_);

                            var status_ = (int)response_.StatusCode;
                            if (status_ == 201)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<CreateUserResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                return objectResponse_.Object;
                            }
                            else
                            if (status_ == 400)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 422)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ValidationProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            {
                                var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                                throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                            }
                        }
                        finally
                        {
                            if (disposeResponse_)
                                response_.Dispose();
                        }
                    }
                }
                finally
                {
                    if (disposeClient_)
                        client_.Dispose();
                }
            }

            /// <exception cref="ApiException">A server side error occurred.</exception>
            public virtual System.Threading.Tasks.Task<AccessTokenResult> AuthenticateAsync(string version, AuthenticateUserCommand command)
            {
                return AuthenticateAsync(version, command, System.Threading.CancellationToken.None);
            }

            /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            /// <exception cref="ApiException">A server side error occurred.</exception>
            public virtual async System.Threading.Tasks.Task<AccessTokenResult> AuthenticateAsync(string version, AuthenticateUserCommand command, System.Threading.CancellationToken cancellationToken)
            {
                if (version == null)
                    throw new System.ArgumentNullException("version");

                if (command == null)
                    throw new System.ArgumentNullException("command");

                var client_ = _httpClient;
                var disposeClient_ = false;
                try
                {
                    using (var request_ = new System.Net.Http.HttpRequestMessage())
                    {
                        var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(command, JsonSerializerSettings);
                        var content_ = new System.Net.Http.ByteArrayContent(json_);
                        content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                        request_.Content = content_;
                        request_.Method = new System.Net.Http.HttpMethod("POST");
                        request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                        var urlBuilder_ = new System.Text.StringBuilder();
                        if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                        // Operation Path: "api/v{version}/Users/login"
                        urlBuilder_.Append("api/v");
                        urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                        urlBuilder_.Append("/Users/login");

                        PrepareRequest(client_, request_, urlBuilder_);

                        var url_ = urlBuilder_.ToString();
                        request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                        PrepareRequest(client_, request_, url_);

                        var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                        var disposeResponse_ = true;
                        try
                        {
                            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                            foreach (var item_ in response_.Headers)
                                headers_[item_.Key] = item_.Value;
                            if (response_.Content != null && response_.Content.Headers != null)
                            {
                                foreach (var item_ in response_.Content.Headers)
                                    headers_[item_.Key] = item_.Value;
                            }

                            ProcessResponse(client_, response_);

                            var status_ = (int)response_.StatusCode;
                            if (status_ == 200)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<AccessTokenResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                return objectResponse_.Object;
                            }
                            else
                            if (status_ == 401)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 422)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ValidationProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            {
                                var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                                throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                            }
                        }
                        finally
                        {
                            if (disposeResponse_)
                                response_.Dispose();
                        }
                    }
                }
                finally
                {
                    if (disposeClient_)
                        client_.Dispose();
                }
            }

            /// <exception cref="ApiException">A server side error occurred.</exception>
            public virtual System.Threading.Tasks.Task<AccessTokenResult> RefreshAccessTokenAsync(string version, ExchangeRefreshTokenCommand command)
            {
                return RefreshAccessTokenAsync(version, command, System.Threading.CancellationToken.None);
            }

            /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            /// <exception cref="ApiException">A server side error occurred.</exception>
            public virtual async System.Threading.Tasks.Task<AccessTokenResult> RefreshAccessTokenAsync(string version, ExchangeRefreshTokenCommand command, System.Threading.CancellationToken cancellationToken)
            {
                if (version == null)
                    throw new System.ArgumentNullException("version");

                if (command == null)
                    throw new System.ArgumentNullException("command");

                var client_ = _httpClient;
                var disposeClient_ = false;
                try
                {
                    using (var request_ = new System.Net.Http.HttpRequestMessage())
                    {
                        var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(command, JsonSerializerSettings);
                        var content_ = new System.Net.Http.ByteArrayContent(json_);
                        content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                        request_.Content = content_;
                        request_.Method = new System.Net.Http.HttpMethod("POST");
                        request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                        var urlBuilder_ = new System.Text.StringBuilder();
                        if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                        // Operation Path: "api/v{version}/Users/exchange-refresh-token"
                        urlBuilder_.Append("api/v");
                        urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                        urlBuilder_.Append("/Users/exchange-refresh-token");

                        PrepareRequest(client_, request_, urlBuilder_);

                        var url_ = urlBuilder_.ToString();
                        request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                        PrepareRequest(client_, request_, url_);

                        var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                        var disposeResponse_ = true;
                        try
                        {
                            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                            foreach (var item_ in response_.Headers)
                                headers_[item_.Key] = item_.Value;
                            if (response_.Content != null && response_.Content.Headers != null)
                            {
                                foreach (var item_ in response_.Content.Headers)
                                    headers_[item_.Key] = item_.Value;
                            }

                            ProcessResponse(client_, response_);

                            var status_ = (int)response_.StatusCode;
                            if (status_ == 200)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<AccessTokenResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                return objectResponse_.Object;
                            }
                            else
                            if (status_ == 401)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 422)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ValidationProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            {
                                var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                                throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                            }
                        }
                        finally
                        {
                            if (disposeResponse_)
                                response_.Dispose();
                        }
                    }
                }
                finally
                {
                    if (disposeClient_)
                        client_.Dispose();
                }
            }

            /// <exception cref="ApiException">A server side error occurred.</exception>
            public virtual System.Threading.Tasks.Task<TokenResult> GenerateEmailConfirmationTokenAsync(string? userId, string version)
            {
                return GenerateEmailConfirmationTokenAsync(userId, version, System.Threading.CancellationToken.None);
            }

            /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            /// <exception cref="ApiException">A server side error occurred.</exception>
            public virtual async System.Threading.Tasks.Task<TokenResult> GenerateEmailConfirmationTokenAsync(string? userId, string version, System.Threading.CancellationToken cancellationToken)
            {
                if (version == null)
                    throw new System.ArgumentNullException("version");

                var client_ = _httpClient;
                var disposeClient_ = false;
                try
                {
                    using (var request_ = new System.Net.Http.HttpRequestMessage())
                    {
                        request_.Method = new System.Net.Http.HttpMethod("GET");
                        request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                        var urlBuilder_ = new System.Text.StringBuilder();
                        if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                        // Operation Path: "api/v{version}/Users/get-email-confirm-token"
                        urlBuilder_.Append("api/v");
                        urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                        urlBuilder_.Append("/Users/get-email-confirm-token");
                        urlBuilder_.Append('?');
                        if (userId != null)
                        {
                            urlBuilder_.Append(System.Uri.EscapeDataString("userId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(userId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                        }
                        urlBuilder_.Length--;

                        PrepareRequest(client_, request_, urlBuilder_);

                        var url_ = urlBuilder_.ToString();
                        request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                        PrepareRequest(client_, request_, url_);

                        var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                        var disposeResponse_ = true;
                        try
                        {
                            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                            foreach (var item_ in response_.Headers)
                                headers_[item_.Key] = item_.Value;
                            if (response_.Content != null && response_.Content.Headers != null)
                            {
                                foreach (var item_ in response_.Content.Headers)
                                    headers_[item_.Key] = item_.Value;
                            }

                            ProcessResponse(client_, response_);

                            var status_ = (int)response_.StatusCode;
                            if (status_ == 200)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<TokenResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                return objectResponse_.Object;
                            }
                            else
                            if (status_ == 401)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 400)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<Result>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<Result>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            {
                                var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                                throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                            }
                        }
                        finally
                        {
                            if (disposeResponse_)
                                response_.Dispose();
                        }
                    }
                }
                finally
                {
                    if (disposeClient_)
                        client_.Dispose();
                }
            }

            /// <exception cref="ApiException">A server side error occurred.</exception>
            public virtual System.Threading.Tasks.Task ConfirmEmailAsync(string version, ConfirmEmailCommand command)
            {
                return ConfirmEmailAsync(version, command, System.Threading.CancellationToken.None);
            }

            /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            /// <exception cref="ApiException">A server side error occurred.</exception>
            public virtual async System.Threading.Tasks.Task ConfirmEmailAsync(string version, ConfirmEmailCommand command, System.Threading.CancellationToken cancellationToken)
            {
                if (version == null)
                    throw new System.ArgumentNullException("version");

                if (command == null)
                    throw new System.ArgumentNullException("command");

                var client_ = _httpClient;
                var disposeClient_ = false;
                try
                {
                    using (var request_ = new System.Net.Http.HttpRequestMessage())
                    {
                        var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(command, JsonSerializerSettings);
                        var content_ = new System.Net.Http.ByteArrayContent(json_);
                        content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                        request_.Content = content_;
                        request_.Method = new System.Net.Http.HttpMethod("POST");

                        var urlBuilder_ = new System.Text.StringBuilder();
                        if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                        // Operation Path: "api/v{version}/Users/confirm-email"
                        urlBuilder_.Append("api/v");
                        urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                        urlBuilder_.Append("/Users/confirm-email");

                        PrepareRequest(client_, request_, urlBuilder_);

                        var url_ = urlBuilder_.ToString();
                        request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                        PrepareRequest(client_, request_, url_);

                        var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                        var disposeResponse_ = true;
                        try
                        {
                            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                            foreach (var item_ in response_.Headers)
                                headers_[item_.Key] = item_.Value;
                            if (response_.Content != null && response_.Content.Headers != null)
                            {
                                foreach (var item_ in response_.Content.Headers)
                                    headers_[item_.Key] = item_.Value;
                            }

                            ProcessResponse(client_, response_);

                            var status_ = (int)response_.StatusCode;
                            if (status_ == 204)
                            {
                                return;
                            }
                            else
                            if (status_ == 400)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<Result>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<Result>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            {
                                var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                                throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                            }
                        }
                        finally
                        {
                            if (disposeResponse_)
                                response_.Dispose();
                        }
                    }
                }
                finally
                {
                    if (disposeClient_)
                        client_.Dispose();
                }
            }

            /// <exception cref="ApiException">A server side error occurred.</exception>
            public virtual System.Threading.Tasks.Task ConfirmEmail2Async(string version, ResendConfirmationEmailCommand command)
            {
                return ConfirmEmail2Async(version, command, System.Threading.CancellationToken.None);
            }

            /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            /// <exception cref="ApiException">A server side error occurred.</exception>
            public virtual async System.Threading.Tasks.Task ConfirmEmail2Async(string version, ResendConfirmationEmailCommand command, System.Threading.CancellationToken cancellationToken)
            {
                if (version == null)
                    throw new System.ArgumentNullException("version");

                if (command == null)
                    throw new System.ArgumentNullException("command");

                var client_ = _httpClient;
                var disposeClient_ = false;
                try
                {
                    using (var request_ = new System.Net.Http.HttpRequestMessage())
                    {
                        var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(command, JsonSerializerSettings);
                        var content_ = new System.Net.Http.ByteArrayContent(json_);
                        content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                        request_.Content = content_;
                        request_.Method = new System.Net.Http.HttpMethod("POST");

                        var urlBuilder_ = new System.Text.StringBuilder();
                        if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                        // Operation Path: "api/v{version}/Users/resend-confirmation-email"
                        urlBuilder_.Append("api/v");
                        urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                        urlBuilder_.Append("/Users/resend-confirmation-email");

                        PrepareRequest(client_, request_, urlBuilder_);

                        var url_ = urlBuilder_.ToString();
                        request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                        PrepareRequest(client_, request_, url_);

                        var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                        var disposeResponse_ = true;
                        try
                        {
                            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                            foreach (var item_ in response_.Headers)
                                headers_[item_.Key] = item_.Value;
                            if (response_.Content != null && response_.Content.Headers != null)
                            {
                                foreach (var item_ in response_.Content.Headers)
                                    headers_[item_.Key] = item_.Value;
                            }

                            ProcessResponse(client_, response_);

                            var status_ = (int)response_.StatusCode;
                            if (status_ == 204)
                            {
                                return;
                            }
                            else
                            {
                                var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                                throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                            }
                        }
                        finally
                        {
                            if (disposeResponse_)
                                response_.Dispose();
                        }
                    }
                }
                finally
                {
                    if (disposeClient_)
                        client_.Dispose();
                }
            }

            /// <exception cref="ApiException">A server side error occurred.</exception>
            public virtual System.Threading.Tasks.Task ForgotPasswordAsync(string version, ForgotPasswordCommand command)
            {
                return ForgotPasswordAsync(version, command, System.Threading.CancellationToken.None);
            }

            /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            /// <exception cref="ApiException">A server side error occurred.</exception>
            public virtual async System.Threading.Tasks.Task ForgotPasswordAsync(string version, ForgotPasswordCommand command, System.Threading.CancellationToken cancellationToken)
            {
                if (version == null)
                    throw new System.ArgumentNullException("version");

                if (command == null)
                    throw new System.ArgumentNullException("command");

                var client_ = _httpClient;
                var disposeClient_ = false;
                try
                {
                    using (var request_ = new System.Net.Http.HttpRequestMessage())
                    {
                        var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(command, JsonSerializerSettings);
                        var content_ = new System.Net.Http.ByteArrayContent(json_);
                        content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                        request_.Content = content_;
                        request_.Method = new System.Net.Http.HttpMethod("POST");

                        var urlBuilder_ = new System.Text.StringBuilder();
                        if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                        // Operation Path: "api/v{version}/Users/forgot-password"
                        urlBuilder_.Append("api/v");
                        urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                        urlBuilder_.Append("/Users/forgot-password");

                        PrepareRequest(client_, request_, urlBuilder_);

                        var url_ = urlBuilder_.ToString();
                        request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                        PrepareRequest(client_, request_, url_);

                        var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                        var disposeResponse_ = true;
                        try
                        {
                            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                            foreach (var item_ in response_.Headers)
                                headers_[item_.Key] = item_.Value;
                            if (response_.Content != null && response_.Content.Headers != null)
                            {
                                foreach (var item_ in response_.Content.Headers)
                                    headers_[item_.Key] = item_.Value;
                            }

                            ProcessResponse(client_, response_);

                            var status_ = (int)response_.StatusCode;
                            if (status_ == 204)
                            {
                                return;
                            }
                            else
                            if (status_ == 400)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<Result>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<Result>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            {
                                var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                                throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                            }
                        }
                        finally
                        {
                            if (disposeResponse_)
                                response_.Dispose();
                        }
                    }
                }
                finally
                {
                    if (disposeClient_)
                        client_.Dispose();
                }
            }

            /// <exception cref="ApiException">A server side error occurred.</exception>
            public virtual System.Threading.Tasks.Task<TokenResult> GeneratePasswordResetTokenAsync(string version, GeneratePasswordResetCommand command)
            {
                return GeneratePasswordResetTokenAsync(version, command, System.Threading.CancellationToken.None);
            }

            /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            /// <exception cref="ApiException">A server side error occurred.</exception>
            public virtual async System.Threading.Tasks.Task<TokenResult> GeneratePasswordResetTokenAsync(string version, GeneratePasswordResetCommand command, System.Threading.CancellationToken cancellationToken)
            {
                if (version == null)
                    throw new System.ArgumentNullException("version");

                if (command == null)
                    throw new System.ArgumentNullException("command");

                var client_ = _httpClient;
                var disposeClient_ = false;
                try
                {
                    using (var request_ = new System.Net.Http.HttpRequestMessage())
                    {
                        var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(command, JsonSerializerSettings);
                        var content_ = new System.Net.Http.ByteArrayContent(json_);
                        content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                        request_.Content = content_;
                        request_.Method = new System.Net.Http.HttpMethod("GET");
                        request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                        var urlBuilder_ = new System.Text.StringBuilder();
                        if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                        // Operation Path: "api/v{version}/Users/get-password-reset-token"
                        urlBuilder_.Append("api/v");
                        urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                        urlBuilder_.Append("/Users/get-password-reset-token");

                        PrepareRequest(client_, request_, urlBuilder_);

                        var url_ = urlBuilder_.ToString();
                        request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                        PrepareRequest(client_, request_, url_);

                        var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                        var disposeResponse_ = true;
                        try
                        {
                            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                            foreach (var item_ in response_.Headers)
                                headers_[item_.Key] = item_.Value;
                            if (response_.Content != null && response_.Content.Headers != null)
                            {
                                foreach (var item_ in response_.Content.Headers)
                                    headers_[item_.Key] = item_.Value;
                            }

                            ProcessResponse(client_, response_);

                            var status_ = (int)response_.StatusCode;
                            if (status_ == 200)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<TokenResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                return objectResponse_.Object;
                            }
                            else
                            if (status_ == 401)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            if (status_ == 400)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<Result>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<Result>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            {
                                var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                                throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                            }
                        }
                        finally
                        {
                            if (disposeResponse_)
                                response_.Dispose();
                        }
                    }
                }
                finally
                {
                    if (disposeClient_)
                        client_.Dispose();
                }
            }

            /// <exception cref="ApiException">A server side error occurred.</exception>
            public virtual System.Threading.Tasks.Task ForgotPassword2Async(string version, ResetPasswordCommand command)
            {
                return ForgotPassword2Async(version, command, System.Threading.CancellationToken.None);
            }

            /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            /// <exception cref="ApiException">A server side error occurred.</exception>
            public virtual async System.Threading.Tasks.Task ForgotPassword2Async(string version, ResetPasswordCommand command, System.Threading.CancellationToken cancellationToken)
            {
                if (version == null)
                    throw new System.ArgumentNullException("version");

                if (command == null)
                    throw new System.ArgumentNullException("command");

                var client_ = _httpClient;
                var disposeClient_ = false;
                try
                {
                    using (var request_ = new System.Net.Http.HttpRequestMessage())
                    {
                        var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(command, JsonSerializerSettings);
                        var content_ = new System.Net.Http.ByteArrayContent(json_);
                        content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                        request_.Content = content_;
                        request_.Method = new System.Net.Http.HttpMethod("POST");

                        var urlBuilder_ = new System.Text.StringBuilder();
                        if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                        // Operation Path: "api/v{version}/Users/reset-password"
                        urlBuilder_.Append("api/v");
                        urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                        urlBuilder_.Append("/Users/reset-password");

                        PrepareRequest(client_, request_, urlBuilder_);

                        var url_ = urlBuilder_.ToString();
                        request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                        PrepareRequest(client_, request_, url_);

                        var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                        var disposeResponse_ = true;
                        try
                        {
                            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                            foreach (var item_ in response_.Headers)
                                headers_[item_.Key] = item_.Value;
                            if (response_.Content != null && response_.Content.Headers != null)
                            {
                                foreach (var item_ in response_.Content.Headers)
                                    headers_[item_.Key] = item_.Value;
                            }

                            ProcessResponse(client_, response_);

                            var status_ = (int)response_.StatusCode;
                            if (status_ == 204)
                            {
                                return;
                            }
                            else
                            if (status_ == 400)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<Result>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<Result>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            {
                                var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                                throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                            }
                        }
                        finally
                        {
                            if (disposeResponse_)
                                response_.Dispose();
                        }
                    }
                }
                finally
                {
                    if (disposeClient_)
                        client_.Dispose();
                }
            }

            /// <exception cref="ApiException">A server side error occurred.</exception>
            public virtual System.Threading.Tasks.Task<FileResponse> UpdateAsync(string version, UpdateProfileCommand command)
            {
                return UpdateAsync(version, command, System.Threading.CancellationToken.None);
            }

            /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            /// <exception cref="ApiException">A server side error occurred.</exception>
            public virtual async System.Threading.Tasks.Task<FileResponse> UpdateAsync(string version, UpdateProfileCommand command, System.Threading.CancellationToken cancellationToken)
            {
                if (version == null)
                    throw new System.ArgumentNullException("version");

                if (command == null)
                    throw new System.ArgumentNullException("command");

                var client_ = _httpClient;
                var disposeClient_ = false;
                try
                {
                    using (var request_ = new System.Net.Http.HttpRequestMessage())
                    {
                        var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(command, JsonSerializerSettings);
                        var content_ = new System.Net.Http.ByteArrayContent(json_);
                        content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                        request_.Content = content_;
                        request_.Method = new System.Net.Http.HttpMethod("PUT");
                        request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/octet-stream"));

                        var urlBuilder_ = new System.Text.StringBuilder();
                        if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                        // Operation Path: "api/v{version}/Users/profile"
                        urlBuilder_.Append("api/v");
                        urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                        urlBuilder_.Append("/Users/profile");

                        PrepareRequest(client_, request_, urlBuilder_);

                        var url_ = urlBuilder_.ToString();
                        request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                        PrepareRequest(client_, request_, url_);

                        var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                        var disposeResponse_ = true;
                        try
                        {
                            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                            foreach (var item_ in response_.Headers)
                                headers_[item_.Key] = item_.Value;
                            if (response_.Content != null && response_.Content.Headers != null)
                            {
                                foreach (var item_ in response_.Content.Headers)
                                    headers_[item_.Key] = item_.Value;
                            }

                            ProcessResponse(client_, response_);

                            var status_ = (int)response_.StatusCode;
                            if (status_ == 200 || status_ == 206)
                            {
                                var responseStream_ = response_.Content == null ? System.IO.Stream.Null : await response_.Content.ReadAsStreamAsync().ConfigureAwait(false);
                                var fileResponse_ = new FileResponse(status_, headers_, responseStream_, null, response_);
                                disposeClient_ = false; disposeResponse_ = false; // response and client are disposed by FileResponse
                                return fileResponse_;
                            }
                            else
                            {
                                var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                                throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                            }
                        }
                        finally
                        {
                            if (disposeResponse_)
                                response_.Dispose();
                        }
                    }
                }
                finally
                {
                    if (disposeClient_)
                        client_.Dispose();
                }
            }

            /// <exception cref="ApiException">A server side error occurred.</exception>
            public virtual System.Threading.Tasks.Task<FileResponse> Update2Async(string version, FileParameter avatarFile)
            {
                return Update2Async(version, avatarFile, System.Threading.CancellationToken.None);
            }

            /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            /// <exception cref="ApiException">A server side error occurred.</exception>
            public virtual async System.Threading.Tasks.Task<FileResponse> Update2Async(string version, FileParameter avatarFile, System.Threading.CancellationToken cancellationToken)
            {
                if (version == null)
                    throw new System.ArgumentNullException("version");

                var client_ = _httpClient;
                var disposeClient_ = false;
                try
                {
                    using (var request_ = new System.Net.Http.HttpRequestMessage())
                    {
                        var boundary_ = System.Guid.NewGuid().ToString();
                        var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                        content_.Headers.Remove("Content-Type");
                        content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);

                        if (avatarFile != null)
                        {
                            var content_avatarFile_ = new System.Net.Http.StreamContent(avatarFile.Data);
                            if (!string.IsNullOrEmpty(avatarFile.ContentType))
                                content_avatarFile_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse(avatarFile.ContentType);
                            content_.Add(content_avatarFile_, "avatarFile", avatarFile.FileName ?? "avatarFile");
                        }
                        request_.Content = content_;
                        request_.Method = new System.Net.Http.HttpMethod("PUT");
                        request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/octet-stream"));

                        var urlBuilder_ = new System.Text.StringBuilder();
                        if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                        // Operation Path: "api/v{version}/Users/avatar"
                        urlBuilder_.Append("api/v");
                        urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                        urlBuilder_.Append("/Users/avatar");

                        PrepareRequest(client_, request_, urlBuilder_);

                        var url_ = urlBuilder_.ToString();
                        request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                        PrepareRequest(client_, request_, url_);

                        var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                        var disposeResponse_ = true;
                        try
                        {
                            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                            foreach (var item_ in response_.Headers)
                                headers_[item_.Key] = item_.Value;
                            if (response_.Content != null && response_.Content.Headers != null)
                            {
                                foreach (var item_ in response_.Content.Headers)
                                    headers_[item_.Key] = item_.Value;
                            }

                            ProcessResponse(client_, response_);

                            var status_ = (int)response_.StatusCode;
                            if (status_ == 200 || status_ == 206)
                            {
                                var responseStream_ = response_.Content == null ? System.IO.Stream.Null : await response_.Content.ReadAsStreamAsync().ConfigureAwait(false);
                                var fileResponse_ = new FileResponse(status_, headers_, responseStream_, null, response_);
                                disposeClient_ = false; disposeResponse_ = false; // response and client are disposed by FileResponse
                                return fileResponse_;
                            }
                            else
                            {
                                var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                                throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                            }
                        }
                        finally
                        {
                            if (disposeResponse_)
                                response_.Dispose();
                        }
                    }
                }
                finally
                {
                    if (disposeClient_)
                        client_.Dispose();
                }
            }

            /// <exception cref="ApiException">A server side error occurred.</exception>
            public virtual System.Threading.Tasks.Task<FileResponse> Delete2Async(string version)
            {
                return Delete2Async(version, System.Threading.CancellationToken.None);
            }

            /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            /// <exception cref="ApiException">A server side error occurred.</exception>
            public virtual async System.Threading.Tasks.Task<FileResponse> Delete2Async(string version, System.Threading.CancellationToken cancellationToken)
            {
                if (version == null)
                    throw new System.ArgumentNullException("version");

                var client_ = _httpClient;
                var disposeClient_ = false;
                try
                {
                    using (var request_ = new System.Net.Http.HttpRequestMessage())
                    {
                        request_.Method = new System.Net.Http.HttpMethod("DELETE");
                        request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/octet-stream"));

                        var urlBuilder_ = new System.Text.StringBuilder();
                        if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                        // Operation Path: "api/v{version}/Users/avatar"
                        urlBuilder_.Append("api/v");
                        urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                        urlBuilder_.Append("/Users/avatar");

                        PrepareRequest(client_, request_, urlBuilder_);

                        var url_ = urlBuilder_.ToString();
                        request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                        PrepareRequest(client_, request_, url_);

                        var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                        var disposeResponse_ = true;
                        try
                        {
                            var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                            foreach (var item_ in response_.Headers)
                                headers_[item_.Key] = item_.Value;
                            if (response_.Content != null && response_.Content.Headers != null)
                            {
                                foreach (var item_ in response_.Content.Headers)
                                    headers_[item_.Key] = item_.Value;
                            }

                            ProcessResponse(client_, response_);

                            var status_ = (int)response_.StatusCode;
                            if (status_ == 200 || status_ == 206)
                            {
                                var responseStream_ = response_.Content == null ? System.IO.Stream.Null : await response_.Content.ReadAsStreamAsync().ConfigureAwait(false);
                                var fileResponse_ = new FileResponse(status_, headers_, responseStream_, null, response_);
                                disposeClient_ = false; disposeResponse_ = false; // response and client are disposed by FileResponse
                                return fileResponse_;
                            }
                            else
                            {
                                var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                                throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                            }
                        }
                        finally
                        {
                            if (disposeResponse_)
                                response_.Dispose();
                        }
                    }
                }
                finally
                {
                    if (disposeClient_)
                        client_.Dispose();
                }
            }

            protected struct ObjectResponseResult<T>
            {
                public ObjectResponseResult(T responseObject, string responseText)
                {
                    this.Object = responseObject;
                    this.Text = responseText;
                }

                public T Object { get; }

                public string Text { get; }
            }

            public bool ReadResponseAsString { get; set; }

            protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
            {
                if (response == null || response.Content == null)
                {
                    return new ObjectResponseResult<T>(default(T)!, string.Empty);
                }

                if (ReadResponseAsString)
                {
                    var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                    try
                    {
                        var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                        return new ObjectResponseResult<T>(typedBody!, responseText);
                    }
                    catch (System.Text.Json.JsonException exception)
                    {
                        var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                        throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                    }
                }
                else
                {
                    try
                    {
                        using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                        {
                            var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                            return new ObjectResponseResult<T>(typedBody!, string.Empty);
                        }
                    }
                    catch (System.Text.Json.JsonException exception)
                    {
                        var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                        throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                    }
                }
            }

            private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
            {
                if (value == null)
                {
                    return "";
                }

                if (value is System.Enum)
                {
                    var name = System.Enum.GetName(value.GetType(), value);
                    if (name != null)
                    {
                        var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                        if (field != null)
                        {
                            var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                                as System.Runtime.Serialization.EnumMemberAttribute;
                            if (attribute != null)
                            {
                                return attribute.Value != null ? attribute.Value : name;
                            }
                        }

                        var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                        return converted == null ? string.Empty : converted;
                    }
                }
                else if (value is bool)
                {
                    return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
                }
                else if (value is byte[])
                {
                    return System.Convert.ToBase64String((byte[])value);
                }
                else if (value is string[])
                {
                    return string.Join(",", (string[])value);
                }
                else if (value.GetType().IsArray)
                {
                    var valueArray = (System.Array)value;
                    var valueTextArray = new string[valueArray.Length];
                    for (var i = 0; i < valueArray.Length; i++)
                    {
                        valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                    }
                    return string.Join(",", valueTextArray);
                }

                var result = System.Convert.ToString(value, cultureInfo);
                return result == null ? "" : result;
            }
        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
        public partial class ProblemDetails
        {
            [System.Text.Json.Serialization.JsonConstructor]

            public ProblemDetails(string? @detail, string? @instance, int? @status, string? @title, string? @type)

            {

                this.Type = @type;

                this.Title = @title;

                this.Status = @status;

                this.Detail = @detail;

                this.Instance = @instance;

            }
            [System.Text.Json.Serialization.JsonPropertyName("type")]
            public string? Type { get; }

            [System.Text.Json.Serialization.JsonPropertyName("title")]
            public string? Title { get; }

            [System.Text.Json.Serialization.JsonPropertyName("status")]
            public int? Status { get; }

            [System.Text.Json.Serialization.JsonPropertyName("detail")]
            public string? Detail { get; }

            [System.Text.Json.Serialization.JsonPropertyName("instance")]
            public string? Instance { get; }

            private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

            [System.Text.Json.Serialization.JsonExtensionData]
            public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
            {
                get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
                set { _additionalProperties = value; }
            }

        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
        public partial class ValidationProblemDetails : HttpValidationProblemDetails
        {
            [System.Text.Json.Serialization.JsonConstructor]

            public ValidationProblemDetails(string? @detail, System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<string>>? @errors, System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<string>>? @errors, string? @instance, int? @status, string? @title, string? @type)

                : base(detail, errors, instance, status, title, type)

            {

                this.Errors = @errors;

            }
            [System.Text.Json.Serialization.JsonPropertyName("errors")]
            public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<string>>? Errors { get; }

        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
        public partial class HttpValidationProblemDetails : ProblemDetails
        {
            [System.Text.Json.Serialization.JsonConstructor]

            public HttpValidationProblemDetails(string? @detail, System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<string>>? @errors, string? @instance, int? @status, string? @title, string? @type)

                : base(detail, instance, status, title, type)

            {

                this.Errors = @errors;

            }
            [System.Text.Json.Serialization.JsonPropertyName("errors")]
            public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<string>>? Errors { get; }

        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
        public partial class ExceptionProblemDetails : ProblemDetails
        {
            [System.Text.Json.Serialization.JsonConstructor]

            public ExceptionProblemDetails(string? @detail, string? @instance, int? @status, string? @title, string? @type)

                : base(detail, instance, status, title, type)

            {

            }
        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
        public partial class CreateAffiliateAdCommand : AffiliateAdDto
        {
            [System.Text.Json.Serialization.JsonConstructor]

            public CreateAffiliateAdCommand(string? @adContent, string? @affiliateName, string? @affiliateURL, System.Guid? @id, string? @imageUrl, bool? @isActive, int? @order)

                : base(adContent, affiliateName, affiliateURL, id, imageUrl, isActive, order)

            {

            }
        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
        public partial class AffiliateAdDto
        {
            [System.Text.Json.Serialization.JsonConstructor]

            public AffiliateAdDto(string? @adContent, string? @affiliateName, string? @affiliateURL, System.Guid? @id, string? @imageUrl, bool? @isActive, int? @order)

            {

                this.Id = @id;

                this.ImageUrl = @imageUrl;

                this.AffiliateName = @affiliateName;

                this.AffiliateURL = @affiliateURL;

                this.AdContent = @adContent;

                this.Order = @order;

                this.IsActive = @isActive;

            }
            [System.Text.Json.Serialization.JsonPropertyName("id")]
            public System.Guid? Id { get; }

            [System.Text.Json.Serialization.JsonPropertyName("imageUrl")]
            public string? ImageUrl { get; }

            [System.Text.Json.Serialization.JsonPropertyName("affiliateName")]
            public string? AffiliateName { get; }

            [System.Text.Json.Serialization.JsonPropertyName("affiliateURL")]
            public string? AffiliateURL { get; }

            [System.Text.Json.Serialization.JsonPropertyName("adContent")]
            public string? AdContent { get; }

            [System.Text.Json.Serialization.JsonPropertyName("order")]
            public int? Order { get; }

            [System.Text.Json.Serialization.JsonPropertyName("isActive")]
            public bool? IsActive { get; }

        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
        public partial class UpdateAffiliateAdCommand : AffiliateAdDto
        {
            [System.Text.Json.Serialization.JsonConstructor]

            public UpdateAffiliateAdCommand(string? @adContent, string? @affiliateName, string? @affiliateURL, System.Guid? @id, string? @imageUrl, bool? @isActive, int? @order)

                : base(adContent, affiliateName, affiliateURL, id, imageUrl, isActive, order)

            {

            }
        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
        public partial class PaginatedListOfAffiliateAdDto
        {
            [System.Text.Json.Serialization.JsonConstructor]

            public PaginatedListOfAffiliateAdDto(System.Collections.Generic.ICollection<AffiliateAdDto>? @items, int? @pageIndex, int? @totalCount, int? @totalPages)

            {

                this.Items = @items;

                this.PageIndex = @pageIndex;

                this.TotalPages = @totalPages;

                this.TotalCount = @totalCount;

            }
            [System.Text.Json.Serialization.JsonPropertyName("items")]
            public System.Collections.Generic.ICollection<AffiliateAdDto>? Items { get; }

            [System.Text.Json.Serialization.JsonPropertyName("pageIndex")]
            public int? PageIndex { get; }

            [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
            public int? TotalPages { get; }

            [System.Text.Json.Serialization.JsonPropertyName("totalCount")]
            public int? TotalCount { get; }

        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
        public partial class CaptchaChallengeResponseDto
        {
            [System.Text.Json.Serialization.JsonConstructor]

            public CaptchaChallengeResponseDto(string? @challenge)

            {

                this.Challenge = @challenge;

            }
            [System.Text.Json.Serialization.JsonPropertyName("challenge")]
            public string? Challenge { get; }

        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
        public partial class CaptchaVerificationResultDto : Result
        {
            [System.Text.Json.Serialization.JsonConstructor]

            public CaptchaVerificationResultDto(System.Collections.Generic.ICollection<string>? @errors, bool? @succeeded)

                : base(errors, succeeded)

            {

            }
        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
        public partial class Result : ResultBaseOfResultAndString
        {
            [System.Text.Json.Serialization.JsonConstructor]

            public Result(System.Collections.Generic.ICollection<string>? @errors, bool? @succeeded)

                : base(errors, succeeded)

            {

            }
        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
        public abstract partial class ResultBaseOfResultAndString
        {
            [System.Text.Json.Serialization.JsonConstructor]

            protected ResultBaseOfResultAndString(System.Collections.Generic.ICollection<string>? @errors, bool? @succeeded)

            {

                this.Succeeded = @succeeded;

                this.Errors = @errors;

            }
            [System.Text.Json.Serialization.JsonPropertyName("succeeded")]
            public bool? Succeeded { get; }

            [System.Text.Json.Serialization.JsonPropertyName("errors")]
            public System.Collections.Generic.ICollection<string>? Errors { get; }

        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
        public partial class ValidateCaptchaRequest
        {
            [System.Text.Json.Serialization.JsonConstructor]

            public ValidateCaptchaRequest(string? @captcha)

            {

                this.Captcha = @captcha;

            }
            [System.Text.Json.Serialization.JsonPropertyName("captcha")]
            public string? Captcha { get; }

        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
        public partial class CreateFAQCategoryCommand : FAQCategoryDto
        {
            [System.Text.Json.Serialization.JsonConstructor]

            public CreateFAQCategoryCommand(System.Guid? @id, string? @name, int? @order)

                : base(id, name, order)

            {

            }
        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
        public partial class FAQCategoryDto
        {
            [System.Text.Json.Serialization.JsonConstructor]

            public FAQCategoryDto(System.Guid? @id, string? @name, int? @order)

            {

                this.Id = @id;

                this.Name = @name;

                this.Order = @order;

            }
            [System.Text.Json.Serialization.JsonPropertyName("id")]
            public System.Guid? Id { get; }

            [System.Text.Json.Serialization.JsonPropertyName("name")]
            public string? Name { get; }

            [System.Text.Json.Serialization.JsonPropertyName("order")]
            public int? Order { get; }

        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
        public partial class UpdateFAQCategoryCommand : FAQCategoryDto
        {
            [System.Text.Json.Serialization.JsonConstructor]

            public UpdateFAQCategoryCommand(System.Guid? @id, string? @name, int? @order)

                : base(id, name, order)

            {

            }
        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
        public partial class PaginatedListOfFAQCategoryDto
        {
            [System.Text.Json.Serialization.JsonConstructor]

            public PaginatedListOfFAQCategoryDto(System.Collections.Generic.ICollection<FAQCategoryDto>? @items, int? @pageIndex, int? @totalCount, int? @totalPages)

            {

                this.Items = @items;

                this.PageIndex = @pageIndex;

                this.TotalPages = @totalPages;

                this.TotalCount = @totalCount;

            }
            [System.Text.Json.Serialization.JsonPropertyName("items")]
            public System.Collections.Generic.ICollection<FAQCategoryDto>? Items { get; }

            [System.Text.Json.Serialization.JsonPropertyName("pageIndex")]
            public int? PageIndex { get; }

            [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
            public int? TotalPages { get; }

            [System.Text.Json.Serialization.JsonPropertyName("totalCount")]
            public int? TotalCount { get; }

        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
        public partial class CreateFAQItemCommand : FAQItemDto
        {
            [System.Text.Json.Serialization.JsonConstructor]

            public CreateFAQItemCommand(string? @answer, System.Guid? @categoryId, System.Guid? @id, int? @order, string? @question)

                : base(answer, categoryId, id, order, question)

            {

            }
        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
        public partial class FAQItemDto
        {
            [System.Text.Json.Serialization.JsonConstructor]

            public FAQItemDto(string? @answer, System.Guid? @categoryId, System.Guid? @id, int? @order, string? @question)

            {

                this.Id = @id;

                this.CategoryId = @categoryId;

                this.Question = @question;

                this.Answer = @answer;

                this.Order = @order;

            }
            [System.Text.Json.Serialization.JsonPropertyName("id")]
            public System.Guid? Id { get; }

            [System.Text.Json.Serialization.JsonPropertyName("categoryId")]
            public System.Guid? CategoryId { get; }

            [System.Text.Json.Serialization.JsonPropertyName("question")]
            public string? Question { get; }

            [System.Text.Json.Serialization.JsonPropertyName("answer")]
            public string? Answer { get; }

            [System.Text.Json.Serialization.JsonPropertyName("order")]
            public int? Order { get; }

        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
        public partial class UpdateFAQItemCommand : FAQItemDto
        {
            [System.Text.Json.Serialization.JsonConstructor]

            public UpdateFAQItemCommand(string? @answer, System.Guid? @categoryId, System.Guid? @id, int? @order, string? @question)

                : base(answer, categoryId, id, order, question)

            {

            }
        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
        public partial class PaginatedListOfFAQItemDto
        {
            [System.Text.Json.Serialization.JsonConstructor]

            public PaginatedListOfFAQItemDto(System.Collections.Generic.ICollection<FAQItemDto>? @items, int? @pageIndex, int? @totalCount, int? @totalPages)

            {

                this.Items = @items;

                this.PageIndex = @pageIndex;

                this.TotalPages = @totalPages;

                this.TotalCount = @totalCount;

            }
            [System.Text.Json.Serialization.JsonPropertyName("items")]
            public System.Collections.Generic.ICollection<FAQItemDto>? Items { get; }

            [System.Text.Json.Serialization.JsonPropertyName("pageIndex")]
            public int? PageIndex { get; }

            [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
            public int? TotalPages { get; }

            [System.Text.Json.Serialization.JsonPropertyName("totalCount")]
            public int? TotalCount { get; }

        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
        public partial class CreateBannerTypeCommand : BannerTypeDto
        {
            [System.Text.Json.Serialization.JsonConstructor]

            public CreateBannerTypeCommand(string? @description, System.Guid? @id, bool? @isActive, string? @name, decimal? @price)

                : base(description, id, isActive, name, price)

            {

            }
        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
        public partial class BannerTypeDto
        {
            [System.Text.Json.Serialization.JsonConstructor]

            public BannerTypeDto(string? @description, System.Guid? @id, bool? @isActive, string? @name, decimal? @price)

            {

                this.Id = @id;

                this.Name = @name;

                this.Description = @description;

                this.Price = @price;

                this.IsActive = @isActive;

            }
            [System.Text.Json.Serialization.JsonPropertyName("id")]
            public System.Guid? Id { get; }

            [System.Text.Json.Serialization.JsonPropertyName("name")]
            public string? Name { get; }

            [System.Text.Json.Serialization.JsonPropertyName("description")]
            public string? Description { get; }

            [System.Text.Json.Serialization.JsonPropertyName("price")]
            public decimal? Price { get; }

            [System.Text.Json.Serialization.JsonPropertyName("isActive")]
            public bool? IsActive { get; }

        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
        public partial class UpdateBannerTypeCommand : BannerTypeDto
        {
            [System.Text.Json.Serialization.JsonConstructor]

            public UpdateBannerTypeCommand(string? @description, System.Guid? @id, bool? @isActive, string? @name, decimal? @price)

                : base(description, id, isActive, name, price)

            {

            }
        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
        public partial class PaginatedListOfBannerTypeDto
        {
            [System.Text.Json.Serialization.JsonConstructor]

            public PaginatedListOfBannerTypeDto(System.Collections.Generic.ICollection<BannerTypeDto>? @items, int? @pageIndex, int? @totalCount, int? @totalPages)

            {

                this.Items = @items;

                this.PageIndex = @pageIndex;

                this.TotalPages = @totalPages;

                this.TotalCount = @totalCount;

            }
            [System.Text.Json.Serialization.JsonPropertyName("items")]
            public System.Collections.Generic.ICollection<BannerTypeDto>? Items { get; }

            [System.Text.Json.Serialization.JsonPropertyName("pageIndex")]
            public int? PageIndex { get; }

            [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
            public int? TotalPages { get; }

            [System.Text.Json.Serialization.JsonPropertyName("totalCount")]
            public int? TotalCount { get; }

        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
        public partial class CreateMarketConfigurationCommand : MarketConfigurationDto
        {
            [System.Text.Json.Serialization.JsonConstructor]

            public CreateMarketConfigurationCommand(bool? @allowBanners, bool? @allowPoster, string? @description, System.Guid? @id, bool? @isActive, int? @maximumCharacters, int? @maximumThemes, string? @name, decimal? @price)

                : base(allowBanners, allowPoster, description, id, isActive, maximumCharacters, maximumThemes, name, price)

            {

            }
        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
        public partial class MarketConfigurationDto
        {
            [System.Text.Json.Serialization.JsonConstructor]

            public MarketConfigurationDto(bool? @allowBanners, bool? @allowPoster, string? @description, System.Guid? @id, bool? @isActive, int? @maximumCharacters, int? @maximumThemes, string? @name, decimal? @price)

            {

                this.Id = @id;

                this.Name = @name;

                this.Description = @description;

                this.Price = @price;

                this.IsActive = @isActive;

                this.MaximumThemes = @maximumThemes;

                this.MaximumCharacters = @maximumCharacters;

                this.AllowBanners = @allowBanners;

                this.AllowPoster = @allowPoster;

            }
            [System.Text.Json.Serialization.JsonPropertyName("id")]
            public System.Guid? Id { get; }

            [System.Text.Json.Serialization.JsonPropertyName("name")]
            public string? Name { get; }

            [System.Text.Json.Serialization.JsonPropertyName("description")]
            public string? Description { get; }

            [System.Text.Json.Serialization.JsonPropertyName("price")]
            public decimal? Price { get; }

            [System.Text.Json.Serialization.JsonPropertyName("isActive")]
            public bool? IsActive { get; }

            [System.Text.Json.Serialization.JsonPropertyName("maximumThemes")]
            public int? MaximumThemes { get; }

            [System.Text.Json.Serialization.JsonPropertyName("maximumCharacters")]
            public int? MaximumCharacters { get; }

            [System.Text.Json.Serialization.JsonPropertyName("allowBanners")]
            public bool? AllowBanners { get; }

            [System.Text.Json.Serialization.JsonPropertyName("allowPoster")]
            public bool? AllowPoster { get; }

        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
        public partial class UpdateMarketConfigurationCommand : MarketConfigurationDto
        {
            [System.Text.Json.Serialization.JsonConstructor]

            public UpdateMarketConfigurationCommand(bool? @allowBanners, bool? @allowPoster, string? @description, System.Guid? @id, bool? @isActive, int? @maximumCharacters, int? @maximumThemes, string? @name, decimal? @price)

                : base(allowBanners, allowPoster, description, id, isActive, maximumCharacters, maximumThemes, name, price)

            {

            }
        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
        public partial class PaginatedListOfMarketConfigurationDto
        {
            [System.Text.Json.Serialization.JsonConstructor]

            public PaginatedListOfMarketConfigurationDto(System.Collections.Generic.ICollection<MarketConfigurationDto>? @items, int? @pageIndex, int? @totalCount, int? @totalPages)

            {

                this.Items = @items;

                this.PageIndex = @pageIndex;

                this.TotalPages = @totalPages;

                this.TotalCount = @totalCount;

            }
            [System.Text.Json.Serialization.JsonPropertyName("items")]
            public System.Collections.Generic.ICollection<MarketConfigurationDto>? Items { get; }

            [System.Text.Json.Serialization.JsonPropertyName("pageIndex")]
            public int? PageIndex { get; }

            [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
            public int? TotalPages { get; }

            [System.Text.Json.Serialization.JsonPropertyName("totalCount")]
            public int? TotalCount { get; }

        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
        public partial class CreateMarketThemeCommand : MarketThemeDto
        {
            [System.Text.Json.Serialization.JsonConstructor]

            public CreateMarketThemeCommand(string? @description, System.Guid? @id, string? @imageUrl, bool? @isActive, bool? @isDefault, string? @name)

                : base(description, id, imageUrl, isActive, isDefault, name)

            {

            }
        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
        public partial class MarketThemeDto
        {
            [System.Text.Json.Serialization.JsonConstructor]

            public MarketThemeDto(string? @description, System.Guid? @id, string? @imageUrl, bool? @isActive, bool? @isDefault, string? @name)

            {

                this.Id = @id;

                this.Name = @name;

                this.Description = @description;

                this.ImageUrl = @imageUrl;

                this.IsDefault = @isDefault;

                this.IsActive = @isActive;

            }
            [System.Text.Json.Serialization.JsonPropertyName("id")]
            public System.Guid? Id { get; }

            [System.Text.Json.Serialization.JsonPropertyName("name")]
            public string? Name { get; }

            [System.Text.Json.Serialization.JsonPropertyName("description")]
            public string? Description { get; }

            [System.Text.Json.Serialization.JsonPropertyName("imageUrl")]
            public string? ImageUrl { get; }

            [System.Text.Json.Serialization.JsonPropertyName("isDefault")]
            public bool? IsDefault { get; }

            [System.Text.Json.Serialization.JsonPropertyName("isActive")]
            public bool? IsActive { get; }

        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
        public partial class UpdateMarketThemeCommand : MarketThemeDto
        {
            [System.Text.Json.Serialization.JsonConstructor]

            public UpdateMarketThemeCommand(string? @description, System.Guid? @id, string? @imageUrl, bool? @isActive, bool? @isDefault, string? @name)

                : base(description, id, imageUrl, isActive, isDefault, name)

            {

            }
        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
        public partial class PaginatedListOfMarketThemeDto
        {
            [System.Text.Json.Serialization.JsonConstructor]

            public PaginatedListOfMarketThemeDto(System.Collections.Generic.ICollection<MarketThemeDto>? @items, int? @pageIndex, int? @totalCount, int? @totalPages)

            {

                this.Items = @items;

                this.PageIndex = @pageIndex;

                this.TotalPages = @totalPages;

                this.TotalCount = @totalCount;

            }
            [System.Text.Json.Serialization.JsonPropertyName("items")]
            public System.Collections.Generic.ICollection<MarketThemeDto>? Items { get; }

            [System.Text.Json.Serialization.JsonPropertyName("pageIndex")]
            public int? PageIndex { get; }

            [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
            public int? TotalPages { get; }

            [System.Text.Json.Serialization.JsonPropertyName("totalCount")]
            public int? TotalCount { get; }

        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
        public partial class CreateNewsArticleCommand : NewsArticleDto
        {
            [System.Text.Json.Serialization.JsonConstructor]

            public CreateNewsArticleCommand(string? @content, System.DateTimeOffset? @displayUntil, System.Guid? @id, string? @title)

                : base(content, displayUntil, id, title)

            {

            }
        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
        public partial class NewsArticleDto
        {
            [System.Text.Json.Serialization.JsonConstructor]

            public NewsArticleDto(string? @content, System.DateTimeOffset? @displayUntil, System.Guid? @id, string? @title)

            {

                this.Id = @id;

                this.Title = @title;

                this.Content = @content;

                this.DisplayUntil = @displayUntil;

            }
            [System.Text.Json.Serialization.JsonPropertyName("id")]
            public System.Guid? Id { get; }

            [System.Text.Json.Serialization.JsonPropertyName("title")]
            public string? Title { get; }

            [System.Text.Json.Serialization.JsonPropertyName("content")]
            public string? Content { get; }

            [System.Text.Json.Serialization.JsonPropertyName("displayUntil")]
            public System.DateTimeOffset? DisplayUntil { get; }

        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
        public partial class UpdateNewsArticleCommand : NewsArticleDto
        {
            [System.Text.Json.Serialization.JsonConstructor]

            public UpdateNewsArticleCommand(string? @content, System.DateTimeOffset? @displayUntil, System.Guid? @id, string? @title)

                : base(content, displayUntil, id, title)

            {

            }
        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
        public partial class PaginatedListOfNewsArticleDto
        {
            [System.Text.Json.Serialization.JsonConstructor]

            public PaginatedListOfNewsArticleDto(System.Collections.Generic.ICollection<NewsArticleDto>? @items, int? @pageIndex, int? @totalCount, int? @totalPages)

            {

                this.Items = @items;

                this.PageIndex = @pageIndex;

                this.TotalPages = @totalPages;

                this.TotalCount = @totalCount;

            }
            [System.Text.Json.Serialization.JsonPropertyName("items")]
            public System.Collections.Generic.ICollection<NewsArticleDto>? Items { get; }

            [System.Text.Json.Serialization.JsonPropertyName("pageIndex")]
            public int? PageIndex { get; }

            [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
            public int? TotalPages { get; }

            [System.Text.Json.Serialization.JsonPropertyName("totalCount")]
            public int? TotalCount { get; }

        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
        public partial class PaginatedListOfUserProfileDto
        {
            [System.Text.Json.Serialization.JsonConstructor]

            public PaginatedListOfUserProfileDto(System.Collections.Generic.ICollection<UserProfileDto>? @items, int? @pageIndex, int? @totalCount, int? @totalPages)

            {

                this.Items = @items;

                this.PageIndex = @pageIndex;

                this.TotalPages = @totalPages;

                this.TotalCount = @totalCount;

            }
            [System.Text.Json.Serialization.JsonPropertyName("items")]
            public System.Collections.Generic.ICollection<UserProfileDto>? Items { get; }

            [System.Text.Json.Serialization.JsonPropertyName("pageIndex")]
            public int? PageIndex { get; }

            [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
            public int? TotalPages { get; }

            [System.Text.Json.Serialization.JsonPropertyName("totalCount")]
            public int? TotalCount { get; }

        }

        

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
        public partial class CreateUserResult : Result
        {
            [System.Text.Json.Serialization.JsonConstructor]

            public CreateUserResult(System.Collections.Generic.ICollection<string>? @errors, string? @registeredUserId, bool? @succeeded)

                : base(errors, succeeded)

            {

                this.RegisteredUserId = @registeredUserId;

            }
            [System.Text.Json.Serialization.JsonPropertyName("registeredUserId")]
            public string? RegisteredUserId { get; }

        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
        public partial class CreateUserCommand
        {
            [System.Text.Json.Serialization.JsonConstructor]

            public CreateUserCommand(string? @captcha, string? @email, string? @name, string? @password)

            {

                this.Name = @name;

                this.Email = @email;

                this.Password = @password;

                this.Captcha = @captcha;

            }
            [System.Text.Json.Serialization.JsonPropertyName("name")]
            public string? Name { get; }

            [System.Text.Json.Serialization.JsonPropertyName("email")]
            public string? Email { get; }

            [System.Text.Json.Serialization.JsonPropertyName("password")]
            public string? Password { get; }

            [System.Text.Json.Serialization.JsonPropertyName("captcha")]
            public string? Captcha { get; }

        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
        public partial class AccessTokenResult : Result
        {
            [System.Text.Json.Serialization.JsonConstructor]

            public AccessTokenResult(string? @accessToken, System.Collections.Generic.ICollection<string>? @errors, int? @expiresIn, string? @refreshToken, bool? @succeeded, string? @tokenType)

                : base(errors, succeeded)

            {

                this.TokenType = @tokenType;

                this.AccessToken = @accessToken;

                this.ExpiresIn = @expiresIn;

                this.RefreshToken = @refreshToken;

            }
            [System.Text.Json.Serialization.JsonPropertyName("tokenType")]
            public string? TokenType { get; }

            [System.Text.Json.Serialization.JsonPropertyName("accessToken")]
            public string? AccessToken { get; }

            [System.Text.Json.Serialization.JsonPropertyName("expiresIn")]
            public int? ExpiresIn { get; }

            [System.Text.Json.Serialization.JsonPropertyName("refreshToken")]
            public string? RefreshToken { get; }

        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
        public partial class AuthenticateUserCommand
        {
            [System.Text.Json.Serialization.JsonConstructor]

            public AuthenticateUserCommand(string? @email, string? @password, string? @twoFactorCode, string? @twoFactorRecoveryCode)

            {

                this.Email = @email;

                this.Password = @password;

                this.TwoFactorCode = @twoFactorCode;

                this.TwoFactorRecoveryCode = @twoFactorRecoveryCode;

            }
            [System.Text.Json.Serialization.JsonPropertyName("email")]
            public string? Email { get; }

            [System.Text.Json.Serialization.JsonPropertyName("password")]
            public string? Password { get; }

            [System.Text.Json.Serialization.JsonPropertyName("twoFactorCode")]
            public string? TwoFactorCode { get; }

            [System.Text.Json.Serialization.JsonPropertyName("twoFactorRecoveryCode")]
            public string? TwoFactorRecoveryCode { get; }

        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
        public partial class ExchangeRefreshTokenCommand
        {
            [System.Text.Json.Serialization.JsonConstructor]

            public ExchangeRefreshTokenCommand(string? @deviceHash, AuthenticationTokenPair? @oldTokenPair)

            {

                this.OldTokenPair = @oldTokenPair;

                this.DeviceHash = @deviceHash;

            }
            [System.Text.Json.Serialization.JsonPropertyName("oldTokenPair")]
            public AuthenticationTokenPair? OldTokenPair { get; }

            [System.Text.Json.Serialization.JsonPropertyName("deviceHash")]
            public string? DeviceHash { get; }

        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
        public partial class AuthenticationTokenPair
        {
            [System.Text.Json.Serialization.JsonConstructor]

            public AuthenticationTokenPair(string? @accessToken, string? @refreshToken, System.DateTimeOffset? @refreshTokenExpiration)

            {

                this.AccessToken = @accessToken;

                this.RefreshToken = @refreshToken;

                this.RefreshTokenExpiration = @refreshTokenExpiration;

            }
            [System.Text.Json.Serialization.JsonPropertyName("accessToken")]
            public string? AccessToken { get; }

            [System.Text.Json.Serialization.JsonPropertyName("refreshToken")]
            public string? RefreshToken { get; }

            [System.Text.Json.Serialization.JsonPropertyName("refreshTokenExpiration")]
            public System.DateTimeOffset? RefreshTokenExpiration { get; }

        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
        public partial class TokenResult : Result
        {
            [System.Text.Json.Serialization.JsonConstructor]

            public TokenResult(System.Collections.Generic.ICollection<string>? @errors, bool? @succeeded, string? @token)

                : base(errors, succeeded)

            {

                this.Token = @token;

            }
            [System.Text.Json.Serialization.JsonPropertyName("token")]
            public string? Token { get; }

        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
        public partial class ConfirmEmailCommand
        {
            [System.Text.Json.Serialization.JsonConstructor]

            public ConfirmEmailCommand(string? @confirmationToken, string? @userId)

            {

                this.UserId = @userId;

                this.ConfirmationToken = @confirmationToken;

            }
            [System.Text.Json.Serialization.JsonPropertyName("userId")]
            public string? UserId { get; }

            [System.Text.Json.Serialization.JsonPropertyName("confirmationToken")]
            public string? ConfirmationToken { get; }

        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
        public partial class ResendConfirmationEmailCommand
        {
            [System.Text.Json.Serialization.JsonConstructor]

            public ResendConfirmationEmailCommand(string? @email)

            {

                this.Email = @email;

            }
            [System.Text.Json.Serialization.JsonPropertyName("email")]
            public string? Email { get; }

        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
        public partial class ForgotPasswordCommand
        {
            [System.Text.Json.Serialization.JsonConstructor]

            public ForgotPasswordCommand(string? @captcha, string? @email)

            {

                this.Email = @email;

                this.Captcha = @captcha;

            }
            [System.Text.Json.Serialization.JsonPropertyName("email")]
            public string? Email { get; }

            [System.Text.Json.Serialization.JsonPropertyName("captcha")]
            public string? Captcha { get; }

        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
        public partial class GeneratePasswordResetCommand
        {
            [System.Text.Json.Serialization.JsonConstructor]

            public GeneratePasswordResetCommand(string? @email)

            {

                this.Email = @email;

            }
            [System.Text.Json.Serialization.JsonPropertyName("email")]
            public string? Email { get; }

        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
        public partial class ResetPasswordCommand
        {
            [System.Text.Json.Serialization.JsonConstructor]

            public ResetPasswordCommand(string? @email, string? @newPassword, string? @resetCode)

            {

                this.Email = @email;

                this.ResetCode = @resetCode;

                this.NewPassword = @newPassword;

            }
            [System.Text.Json.Serialization.JsonPropertyName("email")]
            public string? Email { get; }

            [System.Text.Json.Serialization.JsonPropertyName("resetCode")]
            public string? ResetCode { get; }

            [System.Text.Json.Serialization.JsonPropertyName("newPassword")]
            public string? NewPassword { get; }

        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
        public partial class UpdateProfileCommand
        {
            [System.Text.Json.Serialization.JsonConstructor]

            public UpdateProfileCommand(string? @email, string? @firstName, bool? @hasConsented, string? @lastName, string? @userId)

            {

                this.UserId = @userId;

                this.FirstName = @firstName;

                this.LastName = @lastName;

                this.Email = @email;

                this.HasConsented = @hasConsented;

            }
            [System.Text.Json.Serialization.JsonPropertyName("userId")]
            public string? UserId { get; }

            [System.Text.Json.Serialization.JsonPropertyName("firstName")]
            public string? FirstName { get; }

            [System.Text.Json.Serialization.JsonPropertyName("lastName")]
            public string? LastName { get; }

            [System.Text.Json.Serialization.JsonPropertyName("email")]
            public string? Email { get; }

            [System.Text.Json.Serialization.JsonPropertyName("hasConsented")]
            public bool? HasConsented { get; }

        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
        public partial class DeleteUserCommand
        {
            [System.Text.Json.Serialization.JsonConstructor]

            public DeleteUserCommand(string? @userId)

            {

                this.UserId = @userId;

            }
            [System.Text.Json.Serialization.JsonPropertyName("userId")]
            public string? UserId { get; }

        }

        [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
        public partial class FileParameter
        {
            public FileParameter(System.IO.Stream data)
                : this(data, null, null)
            {
            }

            public FileParameter(System.IO.Stream data, string? fileName)
                : this(data, fileName, null)
            {
            }

            public FileParameter(System.IO.Stream data, string? fileName, string? contentType)
            {
                Data = data;
                FileName = fileName;
                ContentType = contentType;
            }

            public System.IO.Stream Data { get; private set; }

            public string? FileName { get; private set; }

            public string? ContentType { get; private set; }
        }

        [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
        public partial class FileResponse : System.IDisposable
        {
            private System.IDisposable? _client;
            private System.IDisposable? _response;

            public int StatusCode { get; private set; }

            public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

            public System.IO.Stream Stream { get; private set; }

            public bool IsPartial
            {
                get { return StatusCode == 206; }
            }

            public FileResponse(int statusCode, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.IO.Stream stream, System.IDisposable? client, System.IDisposable? response)
            {
                StatusCode = statusCode;
                Headers = headers;
                Stream = stream;
                _client = client;
                _response = response;
            }

            public void Dispose()
            {
                Stream.Dispose();
                if (_response != null)
                    _response.Dispose();
                if (_client != null)
                    _client.Dispose();
            }
        }


        [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
        public partial class ApiException : System.Exception
        {
            public int StatusCode { get; private set; }

            public string? Response { get; private set; }

            public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

            public ApiException(string message, int statusCode, string? response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception? innerException)
                : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
            {
                StatusCode = statusCode;
                Response = response;
                Headers = headers;
            }

            public override string ToString()
            {
                return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
            }
        }

        [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
        public partial class ApiException<TResult> : ApiException
        {
            public TResult Result { get; private set; }

            public ApiException(string message, int statusCode, string? response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception? innerException)
                : base(message, statusCode, response, headers, innerException)
            {
                Result = result;
            }
        }

    }

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625
}
